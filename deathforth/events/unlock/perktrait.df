// Perk costs

3 constant HEALTHC_COST
3 constant MECHANIC_COST
5 constant DOGPAL_COST
5 constant CARNUT_COST
6 constant EXPLORER_COST

6 constant PATHFINDER_COST
8 constant HAGGLER_COST
10 constant SHIELDOFHOPE_COST

3 constant GUNGINEER_COST
3 constant SURGEON_COST
5 constant FIGHTER_COST
5 constant GUNCRAZY_COST

6 constant TRADEMARK_COST
6 constant NATURALSHOT_COST
8 constant ARCHER_COST
10 constant PYRO_COST

// 8 constant HOMERUN_COST
// 10 constant BARBARIAN_COST
// 10 constant FIERCE_COST

3 constant ATHLETE_COST
5 constant ULTRAFIT_COST
5 constant MEGABUFF_COST
6 constant MARTIALARTIST_COST
6 constant BRUISER_COST

8 constant HIDDENPOT_COST
8 constant EXWRESTLER_COST
10 constant TSTC_COST

// constant _COST

3 constant SOUNDSLEEP_COST
3 constant GOURMAND_COST
6 constant CITYSEEK_COST
6 constant TRAVELLIGHT_COST
10 constant HEROTYPE_COST
10 constant TINYEATER_COST
15 constant ANIMEFAN_COST
15 constant SPECIALIST_COST
15 constant GRAPPLER_COST
20 constant PHOENIX_COST

// START prep logic

0 value ADJ-ZPCOST

: zpview args( cost level )
	<- level 1 = if
		0.4
	else
		<- level 2 = if 
			0.7
		else
			1
		then
	then <- cost * >int
;

: zpcost args( cost level )
	// <- level 1 max <- cost * to ADJ-ZPCOST
	<- cost <- level zpview to ADJ-ZPCOST	
	// ADJ-ZPCOST print console-open
;
: zpcost? // args( cost )
	gstats{ zombo-point } ADJ-ZPCOST 1 - >
;

// Trait/Perk purchase

: $buy args( level ) ( name ) postpone gstats{ find postpone } not if ( error ) then;
 >body <- level 1 + swap !
;

: zp-buy! args( cost )
	gstats{ <- cost -1 * ' zombo-point +! 
		zombo-point 0 < if
			0 to zombo-point
		then
	}
	filesave{ save-global-stats }
	perkdef{ defperks }
;

: shared-buy! args( name level )
	<- name <- level $buy
	ADJ-ZPCOST zp-buy!
;

: trait-nowmake  "Vous pouvez maintenant utiliser l'ecran personnages personnalises pour creer des gens. " ;
: perk-line1 0 > if "Vous avez mis a jour " else trait-nowmake then ;
: zp-upgradenote? 0 > if "Toutes les caracteres auxquels vous affectuez ou ont ete affectes par cette particularite beneficieront des nouvelles fonctionnalites !" +crtext then ;

: trait-buy! args( title name ) ($ trait-nowmake .. <- title pbold .. " traitement !" $) text!
<- name 0 shared-buy! goodfx ;

: perk-buy! args( title name level ) 
	($ <- level perk-line1 .. <- title pbold .. " *c'est un appel courtois, equ" $) text!
	<- level zp-upgradenote? 
	<- level 1 > if "Ce parfum a atteint son niveau maximum !" rainbold +crtext then
	<- name <- level shared-buy! goodfx 
;

defer perkback
defer perk1back
defer perk2back
defer perk3back
defer trait1back
defer gnomeback

// Trait/Perk view and confirm
// Type: 0 for trait unlock, 1 for perk unlock

: unlockupgrade? 1 < if "Deverrouiller " else "Mettre a niveau " then ;
: traitperk? 1 < if " Debloque" else " Parfum" then ;
: $traitperk 1 < if perkdef{ $trait } else perkdef{ $perk } then ;

: shared-confirm! args( name level handler type exit )
	<- name cyoa-title!
	perkdef{ defperks <- name <- type $traitperk desc@ } text!
	choice( "RETOUR" )choice <- exit cyoa-choice-handler!
	// Could try splitting this zpcost section into own word if I do upgrading through CustChar menu
	// Will have to include a zpcost calc
	zpcost? if
		choice( <- level unlockupgrade? .. <- name pbold .. <- type traitperk? .. "! - " .. ADJ-ZPCOST .. " ZP" pbold )choice <- handler cyoa-choice-handler!
	then 
		<- level 1 < if 
			($ "Couts " .. ADJ-ZPCOST .. " Debloquer zp pour commencer !" $) 
		else
			($ " TRAITE. " .. ADJ-ZPCOST .. " ZP" $) 
		then +text +cr zptally
;

: perk-confirm! args( name cost level handler exit )
	<- cost <- level zpcost
	<- name <- level <- handler 1 <- exit shared-confirm! ;

: trait-confirm! args( name cost handler exit )
	<- cost 0 zpcost
	<- name 0 <- handler 0 <- exit shared-confirm! ;

// Shows the choice
: perk-view! args( name cost handler )
	choice( <- name $upper pbold .. " - " .. <- cost .. " ZP" pbold )choice <- handler cyoa-choice-handler!
;
	
// END the prep logic

// Temporary Dude	

cyoa: perk-dingus gstats{
	"Periodes et caracteristiques" cyoa-title!
		
	"I'm developing an amazing new product
	I call them... unlocks. Or 'uncks' for short" text!
	
	zombo-point 3 < if
		"Pour voir ce que je veux dire, il vous faudra obtenir quelques points de zombo ! je les ai egalement inventes recemment."
	else
		"Venez decouvrir le charme des 'cheevos' !... non, je me suis trompe, je voulais dire 'les debloquages'."
	then +crtext +cr zptally
	
	choice( "Laissez-le pour le moment" )choice
	
} ;

' perk-dingus to perkback

	(* gstats{ trait-specialist } 0 > if
		($ "Une hache pour trois aliments " .. "*bleu bruit*" pbold .. " pour le moment, reveillez-vous demain ! je vous donnerai plus a l'actualisation suivante !" $) text! *)
