perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "Arme de marque" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"PARANOIA APPLIQUE AU PERSO " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"INCONSCIENT APPLIQUE AU PERSO " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"BANDIT APPLIQUE AU PERSO " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"CHARMEUR APPLIQUE AU PERSO " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"IRRITANT APPLIQUE AU PERSO " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "Arme de marque" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"CARACTERE IMPULSIF APPLIQUE AU PERSO " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"SANG-FROID APPLIQUEE AU PERSO " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"BIENVEILLANT APPLIQUE AU PERSO " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"INVENTIF APPLIQUE AU PERSONNAGE " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "Arme de marque" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"PLEURNICHARD APPLIQUE AU PERSO " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"RESILIENT APPLIQUE AU PERSO " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"FURIE! APPLIQUEE SUR LE PERSO " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"CIVILISE! APPLIQUE AU PERSO " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"MYSTERIEUX APPLIQUE AU PERSO " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "Expert des arts martiaux" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"PRAGMATIQUE APPLIQUE AU PERSO " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
;

: warriortrait args( chara )
	"GUERRIER APPLIQUE AU PERSO " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"SPECIALISTE APPLIQUE AU PERSONNAGE " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "Arc et Fleches" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "Collectionneur d'armes" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "Pyromane" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"VOYAGE LEGER APPLIQUE AU PERSO " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "Collectionneur darmes" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"LUTTEUR APPLIQUE AU PERSO " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!

	<- chara .perk@ "Ex lutteur" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then

	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	"ALTRUISTE APPLIQUE AU PERSO " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"SOMMEIL LOURD APPLIQUE AU PERSO " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"GOURMET APPLIQUE AU PERSO " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"EXPLORATEUR URBAIN APPLIQUE AU PERSO " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"PETIT MANGEUR APPLIQUE SUR LE CHAR " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"FAN D'ANIMES APPLIQUE SUR LE CHAR " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"PHENIX APPLIQUE SUR LE CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"SAVANT APPLIQUE SUR LE CHAR " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"APPRENTISSAGE RAPIDE APPLIQUE AU PERSO " type <- chara .name@ print
;

// Perks

: healthcareperk args( chara )
	"SOUCIEUX DE LA SANTE APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;

: mechanicperk args( chara )
	"MECANICIEN APPLIQUE SUR LE CHAR " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then
	then WEAPON_WRENCH <- chara .weapona!

;

: athleteperk args( chara )
	"ATHLETE APPLIQUE SUR LE CHAR " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"COMBATTANT APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"CHIRURGIEN APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"EXPERT EN ARMES APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"PISTOLET APPLIQUE AU PERSO " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"FUSIL A POMPE APPLIED AU PERSO " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!
;

: rifleperk args( chara )
	"FUSIL APPLIQUE AU PERSO " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!
;

: guncrazyperk args( chara )
	"FOU DES FLINGUES APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "Fana de voiture" $= ;

: carnutperk args( chara )
	"FAN D'AUTO APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
// Commented out to fix the "des visages familiers donnent une voiture contre leur gre" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"HYPER COSTAUD APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+
		else
			2 STAT_STRENGTH <- chara .stat+
		then
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"TRES EN FORME APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"BAGARREUR APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+
		then
	then WEAPON_BOXING <- chara .weapon_default!
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"EXPERT DES ARTS MARTIAUX APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"AMI DES CHIENS APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"EXPLORATEUR APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	"EX LUTTEUR APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV
;

: hiddenpotentialperk args( chara )
	"POTENTIEL CACHE APPLIQUE AU PERSO " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"NEGOCIATEUR APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"PIONNIER APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"MARQUE DE FABRIQUE APPLIQUEE AU PERSO " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM
		then
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"TIR NATUREL APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+
		then
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"TROP MUSCLE POUR ETRE CONTROLE APPLIQUE AU PERSO " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+
		else
			-6 STAT_FITNESS <- chara .bonus+
		then
	then 6 STAT_FITNESS <- chara .stat+
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"PROTECTEUR APPLIQUE AU PERSO " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Specialiste" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Specialiste" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"ARCHER APPLIQUES AU PERSO " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Specialiste" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Specialiste" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Specialiste" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"PERSO PYROMANE " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. "NIVEAU SUIVANT : " ;
: LOCKED cr$ .. cr$ .. RED ..
	game.location 0 > if "VERROUILLE ! " else "VERROUILLE : Deverrouillez a la hutte des avantages et des traits a Zombo Town" then

;
// Formerly : cr$ .. "NIVEAU SUIVANT : " rbold

: mechaniclevel
	gstats{ perk-mechanic } 3 >= if
		($ "+ Gagnez 2 points en mecanique !		+ Gagnez 2 points en forme physique !" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "+ Gagnez 2 points en mecanique !		+ Gagnez 1 point en forme physique" .. NEXT_LEVEL .. "2 points en forme physique !" $) 1 lvl
	then;
		($ "+ Gagnez 1 point en mecanique		+ Gagnez 1 point en forme physique" ..
		gstats{ perk-mechanic } 1 < if
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "2 points en mecanique !"
		then $)
;

: athletelevel
	gstats{ perk-athlete } 3 >= if
		($ "+ A gagne 2 points dans la fitness !		+ A gagne 2 points dans la force !" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "+ A gagne 2 points dans la fitness !		+ A gagne 1 point dans la force" .. NEXT_LEVEL .. "2 points dans la force !" $) 1 lvl
	then;
		($ "+ A gagne 1 point dans la fitness		+ A gagne 1 point dans la force" .. NEXT_LEVEL .. "2 points en forme physique !" $)
;

: fighterlevel
	gstats{ perk-fighter } 3 >= if
		($ "+ A gagne 2 points dans la force !		+ A gagne 2 points dans le tir!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "+ A gagne 2 points dans la force !		+ A gagne 1 point dans le tir" .. NEXT_LEVEL .. "2 points dans le tir!" $) 1 lvl
	then;
		($ "+ A gagne 1 point dans la force		+ A gagne 1 point dans le tir" .. NEXT_LEVEL .. "2 points dans la force !" $)
;

: surgeonlevel
	gstats{ perk-surgeon } 3 >= if
		($ "+ A gagne 2 points dans la medecine !		+ A gagne 2 points dans le tir!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "+ A gagne 2 points dans la medecine !		+ A gagne 1 point dans le tir" .. NEXT_LEVEL .. "2 points dans le tir!" $) 1 lvl
	then;
		($ "+ A gagne 1 point dans la medecine		+ A gagne 1 point dans le tir" .. NEXT_LEVEL .. "2 points dans la medecine !" $)
;

: gungineerlevel
	gstats{ perk-gungineer } 3 >= if
		($ "+ Gagnez 2 points en tir!		+ Gagnez 2 points en mecanique!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "+ Gagnez 2 points en tir !		+ Gagnez 1 point en mecanique" .. NEXT_LEVEL .. "2 points en mecanique !" $) 1 lvl
	then;
		($ "points in mechanical" .. NEXT_LEVEL .. "2 points dans le tir!" $)
;

: healthcarelevel
	gstats{ perk-healthcare } 3 >= if
		($ "medical supplies" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "medical supplies" .. NEXT_LEVEL .. "7 fournitures medicales!" $) 1 lvl
	then;
		($ "medical supplies" .. NEXT_LEVEL .. "5 materiel medical, 2 en medical !" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "+ Gagner 3 points en tir !" $) 2 lvl ;
: shotgunlevel ($ "+ Gagner 3 points en tir !" $) 2 lvl ;
: riflelevel ($ "+ Gagner 3 points en tir !" $) 2 lvl ;

: guncrazylevel
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "3 en tir, et un fusil a pompe !" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "2 en tir, et un fusil !" $)
;

: carnutlevel
	gstats{ perk-carnut } 3 >= if
		($ "+ Gagner 3 points en mecanique !" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "+ Gagner 2 points en mecanique" .. NEXT_LEVEL .. "3 points en mecanique !" $) 1 lvl
	then;
		($ "+ Gagner 1 point en mecanique" .. NEXT_LEVEL .. "2 points en mecanique" $)
;

: megabufflevel
	gstats{ perk-megabuff } 3 >= if
		($ "+ Gagner 4 points en force !" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "+ Gagner 3 points en force" .. NEXT_LEVEL .. "4 points en force !" $) 1 lvl
	then;
		($ "+ Gagner 2 points en force" .. NEXT_LEVEL .. "3 points en force" $)
;

: ultrafitlevel
	gstats{ perk-ultrafit } 3 >= if
		($ "gagner 4 points en forme!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "+ Gagnez 3 points de fitness" .. NEXT_LEVEL .. "4 points de fitness!" $) 1 lvl
	then;
		($ "+ Gagnez 2 points de fitness" .. NEXT_LEVEL .. "3 points de fitness" $)
;

: martialartistlevel
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "+ Gagnez 2 points de fitness, 1 de force" .. NEXT_LEVEL .. "3 fitness, peut maintenant aller 1 au dessus du max!" $) 1 lvl
	then;
		($ "+ Gagnez 1 points de fitness, 1 de force" .. NEXT_LEVEL .. "2 points de fitness" $)
;

: bruiserlevel
	gstats{ perk-bruiser } 3 >= if
		($ "+ Gagnez 3 points de force!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "+ Gagner 2 points en force" .. NEXT_LEVEL .. "3 en force!" $) 1 lvl
	then;
		($ "+ Gagnez 1 points de force" .. NEXT_LEVEL .. "2 points de force" $)
;

: doglevel
	gstats{ perk-dogfriend } 3 >= if
		($ "+ 70% de chances supplementaires pour une recrue aleatoire detre un chien" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "+ 35% de chances supplementaires pour une recrue aleatoire detre un chien" .. NEXT_LEVEL .. "70% de chance !" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "35% de chance pour les recrutes detre un chien" $)
;

: explorerlevel
	gstats{ perk-explorer } 3 >= if
		($ "+ Les couts de reinitialisation des ABL consomment beaucoup moins de gaz!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "+ Les couts de reinitialisation des ABL consomment moins de gaz" .. NEXT_LEVEL .. "Beaucoup moins de gaz pour les reinitialisations des ABL!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "Moins de gaz pour les reinitialisations des ABL" $)
;

: exwrestlerlevel
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Vous gagnez 2 points dans la force !		+ Vous gagnez 1 point dans lendurance!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+ Vous gagnez 1 point dans la force		+ Vous gagnez 1 point dans lendurance!" .. NEXT_LEVEL .. "2 points en forme physique !" $) 1 lvl
	then;
		($ "+ Vous gagnez 1 point dans lendurance" ..
		gstats{ perk-exwrestler } 1 < if
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 point de force !"
		then $)
;

: hiddenpotentiallevel
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+ Vous gagnez 1 point dans la competence non choisie		+ Vous gagnez 1 point final dans la force ou lendurance, au hasard!" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "+ Vous gagnez 1 point dans lautre competence" .. NEXT_LEVEL .. "Point aleatoire en fitness ou en force !" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "1 point dans lautre competence" $)
		then
;

: hagglerlevel
	gstats{ perk-haggler } 3 >= if
		($ "+ Les peages des bandits sont moins chers !" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "+ Les peages des bandits sont moins chers" .. NEXT_LEVEL .. "Peages encore plus bas !" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "Les peages des bandits sont moins chers" $)
		then
;

: pathfinderlevel
	gstats{ perk-pathfinder } 3 >= if
		($ "+ 75 % de chances deviter les penalites pour la 2e journee de marche !" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "+ 60 % de chances deviter les penalites pour la 2e journee de marche" .. NEXT_LEVEL .. "75 % de chances !" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "60 % de chances deviter les penalites pour la 2e journee de marche" $)
		then
;

: trademarklevel
	gstats{ perk-trademark } 3 >= if
		($ "+ Larme par defaut est une machette robuste !!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "+ Arme par defaut : 50 % de chances de batte en aluminium, 50 % de machette" .. NEXT_LEVEL .. "100 % de chance davoir une machette solide !" $) 1 lvl
	then;
		($ "+ Larme par defaut est une batte en aluminium !" ..
		gstats{ perk-trademark } 1 < if
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "50 % de chance davoir une machette solide !" $)
		then $)
;

: naturalshotlevel
	gstats{ perk-naturalshot } 3 >= if
		($ "+ Gagnez 2 points en tir !		+ Le tir peut depasser de 2 points le maximum habituel !" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "+ Gagnez 2 points en tir !		+ Le tir peut depasser de 1 point le maximum habituel" .. NEXT_LEVEL .. "2 de plus que le maximum !" $) 1 lvl
	then;
		($ "+ Gagnez 1 point en tir		+ Le tir peut depasser de 1 point le maximum habituel" ..
		gstats{ perk-naturalshot } 1 < if
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 points dans le tir!"
		then $)
;

: tstclevel
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ "La condition physique commence a 2 !" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ "La condition physique commence a 1" .. NEXT_LEVEL .. "La condition physique monte a 2 !" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "La condition physique monte a 1" $)
		then
;

: shieldofhopelevel
	gstats{ perk-shieldofhope } 3 >= if
		($ "  vous perdez 2 moral a chaque fois que vous echappez a la mort !" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "  vous perdez 3 moral a chaque fois que vous echappez a la mort" .. NEXT_LEVEL .. "Seulement 2 moral !" $) 1 lvl
	then;
		($ "4 morale" ..
		gstats{ perk-shieldofhope } 1 < if
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "morale gained"
		then $)
;

: archerlevel
		($ "faites des fleches pour votre arc entre les missions " $) ..
	gstats{ perk-archer } 3 >= if
		($ " 00" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "jusqua 7" .. NEXT_LEVEL .. "Creez 10 fleches!" $) 1 lvl
	then;
		($ "jusqua 4" ..
		gstats{ perk-archer } 1 < if
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "7 days of the week"
		then $)
;

: pyrolevel
		($ "rechargez votre chalumeau entre les missions, " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "a peu pres 8 charges !" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "a peu pres 6 charges" .. NEXT_LEVEL .. "Trouvez 8 charges!" $) 1 lvl
	then;
		($ "a peu pres 4 charges" ..
		gstats{ perk-pyro } 1 < if
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Trouvez 6 charges"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"Mecanicien" $perk
		($ "La voiture est la vie ! Note : Ce nest pas necessairement un mecanicien competent.		+ Commencez avec une cle de soude		" .. mechaniclevel $) $desc
		' mechanicperk applyword

	"Athlete" $perk
		($ "Un passe athletique sadapte bien a la survie aux zombies.		+ Demarrez avec une arme sportive aleatoire		" .. athletelevel $) $desc
		' athleteperk applyword

	"Combattant" $perk
		($ "Cette personne a toujours ete un vrai combattant.		+ Commencez avec une hache" .. fighterlevel $) $desc
		' fighterperk applyword

	"Chirurgien" $perk
		($ "A une bonne intuition de lanatomie et une main vraiment ferme.		+ Commencez avec un scalpel		" .. surgeonlevel $) $desc
		' surgeonperk applyword

	"Gun  Engineer" $perk
		($ "Bon avec tout ce qui est mecanique, et les armes sont mecaniques.		+ Commencez avec un pied de biche		" .. gungineerlevel $) $desc
		' gungineerperk applyword

(*	"Pistolero" $perk
		($ "Ces pistolets visent vite et la munition est abondante !		+ Commencez par une pistolet et 30 cartouches		" .. pistollevel $) $desc
		' pistolperk applyword

	"Tireur au fusil" $perk
		($ "Un tir de fusil peut percer une ligne de zombies, entre les bonnes mains !		+ Commencer avec un fusil et 24 munitions		" .. riflelevel $) $desc
		' rifleperk applyword

	"Fusilier" $perk
		($ "Tout le monde sait que les fusils a pompe sont la veritable arme anti zombie !		+ Commencer avec un fusil a pompe et 15 cartouches		" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"Expert des arts martiaux" $perk
		($ "Pas d'armes ? Aucun probleme !		+ Commencer avec une puissante attaque a mains nues !!		  Refuse dutiliser des armes a feu, des tronconneuses et quelques autres !!		" .. martialartistlevel $) $desc
		' martialartistperk applyword

	"Gros costaud" $perk
		($ "Se deplace lentement, frappe tres fort, encaisse les coups !		+ Commencer avec une meilleure attaque a mains nues ! Prendre un coup de plus que la normale !		  Vitesse de marche plus lente !		" .. bruiserlevel $) $desc
		' bruiserperk applyword

	"Collectionneur darmes" $perk
		($ "Vous saviez que thesauriser toutes ces armes serait utile ! Finalement. Vous le saviez !		" .. guncrazylevel $) $desc
		' guncrazyperk applyword

	"Soucieux de la sante" $perk
		($ "Les abrutis se font mordre par les zombies tout le temps. Mieux vaut etre prepare ! 		" .. healthcarelevel $) $desc
		' healthcareperk applyword

	"Fana de voiture" $perk
		($ "Etre un passionne de voitures est pratiquement un super pouvoir maintenant !		+ Commencer avec une meilleure voiture		" .. carnutlevel $) $desc
		' carnutperk applyword

	"Mega costaud" $perk
		($ "Peut etre trop gonfle pour etre controle. Pratique pour ramasser et lancer des meubles lourds !		+ Commencer avec un tuyau metallique		" .. megabufflevel $) $desc
		' megabuffperk applyword

	"Au sommet de sa forme" $perk
		($ "Tout ce yoga a vraiment paye !		+ Commencer avec quelques barres de cereales		" .. ultrafitlevel $) $desc
		' ultrafitperk applyword

	"Ami des Chiens" $perk
		($ "Cette personne adore les chiens et a tendance a les rencontrer!		+ Les chiens en colere peuvent devenir amicaux		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Explorateur" $perk
		($ "Certaines personnes ont tout simplement un tres bon sens de lorientation lorsquelles conduisent!		+ Obtenez un choix demplacement supplementaire pendant les evenements Always Be Looting!		" .. explorerlevel $) $desc
		' explorerperk applyword

	"Ex lutteur" $perk
		($ "Etait le meilleur avant un tragique accident sur le ring!		+ Ramassez les zombies abattus, puis lancez les ou claquez les!		  Penalite importante sur la competence de tir maximale.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword

	"Potentiel cache" $perk
		($ "Semble sans pretention, mais peut depasser les autres avec de lentrainement!		+ Gagnez un point de force ou de forme physique au hasard. Il peut alors depasser le maximum!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword

	"Meilleur vendeur" $perk
		($ "Le bon sens commercial a encore sa propre niche!		+ Obtient 1 a 8 aliments supplementaires lors de la vente a un acheteur darmes, en fonction du prix dorigine.		+ Aucune penalite de moral lors du paiement des peages des bandits avec de la nourriture!		" .. hagglerlevel $) $desc
		' hagglerperk applyword

	"Eclaireur" $perk
		($ "Lexperience de la randonnee permet deviter les terreurs de la foret!		+ Supprime un evenement de penalite du 1er jour de marche, chaque fois que vous perdez la voiture!		" .. pathfinderlevel $) $desc
		' pathfinderperk applyword

	"Arme de marque" $perk
		($ "Se demarque de la foule, avec une arme signature!		+ Commence avec une arme speciale, selon le trait!		  Ne peut pas lacher cette arme, meme dans la mort.		" .. trademarklevel $) $desc
		' trademarkperk applyword

	"Precision naturelle" $perk
		($ "Un tireur ne! Il a juste besoin de plus d'entrainement et peut etre meme d'une arme et de munitions!" .. naturalshotlevel $) $desc
		' naturalshotperk applyword

	"Force de la nature incontrolable" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword

	"Bouclier despoir" $perk
		($ "Can be used to tank hits that would" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword

	"Arc et Fleches" $perk
		($ "Le tir a larc sest avere etre un passe temps utile !		+ Commencer avec un arc silencieux, 30 fleches, 2 points en force !		  Impossible de lacher cet arc, meme dans la mort.		" .. archerlevel $) $desc
		' archerperk applyword

	"Pyromane" $perk
		($ "Zombies sont extremement inflammables !		+ Commencez avec un torchon a souffle, et une protection contre l'incendie !		  Ne pouvez pas le deposer, meme dans la mort.		," .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"ESSAI" i .. $perk
		($ "Le tir a larc sest avere etre un passe temps utile !		+ Commencer avec un arc silencieux, 30 fleches, 2 points en force !		  Impossible de lacher cet arc, meme dans la mort.		" .. archerlevel $) $desc
		' archerperk applyword
	next
*)

	// "Barbare"
	// "Champion de Home Run"
	// "Feroce"

	// Traits
	"Paranoiaque" $trait
		"Une combinaison de grande perception et d'extreme pessimisme permet a quelqu'un de se preparer au pire !
		+ Peut identifier des traits chez les nouvelles recrues
		+ Toujours a l'affut du danger.
		- Peut etre vraiment grincheux" $desc
		' paranoidtrait applyword
	"Insensible" $trait
		"Un excellent point de vue sur la vie combine a une faible perception permettent des merveilleux exploits de deni !
		+ Peut ignorer le desespoir
		- Mauvais jets pour la perception et l'esprit" $desc
		' oblivtrait applyword
	"Charmeur" $trait
		"Grace a uen bonne perception des autres, a une bonne attitude et a un pur charisme, il y a quelque chose chez cette personne qui ouvre des portes !
		+ Parvient a obtenir des choses gratuites ou a se sortir de mauvaises situations grace a son charme
		- Ne peut pas se sortir de tout avec son charme" $desc
		' charmtrait applyword
	"Irritant" $trait
		"Cette personne pense qu'elle est vraaaaaaaaaaiment cool. Mais elle ne l'est pas ! Elle est juste agacante !
		+ Dit aux gens de se "CALMER"
		- enerve a peu pres tout le monde" $desc
		' gratingtrait applyword
	"Bandit" $trait
		"Etre un bandit peut etre un atout dans un monde post-apocalypse.
		+ Arnaquer les autres
		- Arnaquer le groupe
		- Bombe a retardement" $desc
		' bandittrait applyword
	"Passe Mysterieux" $trait
		"Cette personne... a un passe mysterieux......
		+ 3 points attribues aux competences de combat de facon aleatoire
		- Personnalite aleatoire et borderline !" $desc
		' mysterytrait applyword
	"Pratique" $trait
		"A une grande variete de competences utiles, mais c'est un peu ennuyeux.
		+ 3 points attribues aux competences de combat au hasard
		+ 3 points attribues aux competences de soutien au hasard
		Personnalite ennuyeuse" $desc
		' practicaltrait applyword
	"Guerrier" $trait
		"Bon depart pour les competences de frappe de zombies, avec une personnalite quelconque.
		+ 2 points de plus en force !
		+ 2 points de plus en forme physique !
		Personnalite ennuyeuse" $desc
		' warriortrait applyword
	"Colerique" $trait
		"Quelqu'un qui a un mauvais caractere ! L'agressivite peut s'averer utile.
		+ 1 point supplementaire en force
		- Mauvais caractere du a un faible sang froid
		+ Ce temperament peut parfois avoir du bon" $desc
		' fiercetrait applyword
	"Sang-froid" $trait
		"Calme et serein. Utile pour tirer sur une horde !
		+ Tres calme grace a un sang froid eleve
		+ 1 point supplementaire en tir" $desc
		' calmtrait applyword
	"Bienveillant" $trait
		"Toujours penser aux autres ! Pas encore de nourriture pour zombies.
		+ 2 points en medecine ! Tres bonne attitude
		+ Peut depasser d'un point le maximum pour la competence medicale !
		- Peut etre un acte" $desc
		' nurturetrait applyword
	"Inventif" $trait
		"A l'aise avec les machines comme avec les voitures.
		+ 2 points de plus en mecanique ! Excellents tests de QI !
		+ Peut aller au dela du maximum pour la competence mecanique !!
		- Peut avoir besoin de plus de pratique pour reparer la voiture" $desc
		' inventtrait applyword
	"Pleurnichard" $trait
		"Une sorte de fragile. Mais vraiment doue pour fuir !
		+ Bonus de vitesse de course !
		- Prend un coup de moins que la normale
		- Mauvaise attitude" $desc
		' frantictrait applyword
	"Type resilient" $trait
		"Vraiment costaud ! Le muscle ! Pas un planificateur a long terme.
		+ Prend un coup de plus que la normale
		- Mauvais jets d'esprit" $desc
		' toughtrait applyword
	"BERSERKER !" $trait
		"Detruire tous les zombies ! Ne jamais reculer ! Oh non, je me suis fait mordre !
		+ 4 points de force, forme physique et tir !!
		+ Peut depasser le maximum pour les statistiques ci-dessus !!!
		- Statistiques de personnalite tres faibles ! Meurt en une seule morsure !!"" $desc
		' berserktrait applyword
	"Civilise" $trait
		"Conserve les vieilles valeurs avant que le monde ne devienne fou. C'est a la fois positif et negatif.
		+ Stats de loyaute et de personnalite super elevees !
		+ 1 point aux competences medicales et mecaniques !!
		- Penalite permanente et significative pour le moral !!" $desc
		' civiltrait applyword
	"Gros dormeur" $trait
		($ "Dort n'importe quand, n'importe ou. Le #1 du sommeil !
		+ Sommeil surhumain ! A besoin de tres peu de sommeil.
		+ N'obtient jamais le statut FATIGUE, jamais." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"Gourmand" $trait
		($ "Apprecie vraiment les vieilles boites de conserve !
		+ Un repas complet restaure 1 point de morale a ce personnage jusqu'a ce que ce soit plein ! Gagne un point supplementaire de sante maximale !
		- Mange un peu plus, 3 unites de nourriture au lieu de 2. Le manque de nourriture diminue plus rapidement le moral !" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Explorateur urbain" $trait
		($ "Beni d'une vie interessante !
		+ Beaucoup plus de chances de trouver un batiment ou un personnage etrange lors des evenements de pillage en ville ! Chance normale : 10%, avec le trait : 50%
		+ Double les chances de trouver des Camps de Commercants Rares !" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Voyage leger" $trait
		($ "Portez moins pour courir un peu plus vite !
		+ Bonus de vitesse de course !
		+ 1 point de plus en condition physique !
		- Ne peut porter que deux armes a la fois !" .. travellight-lock $) $desc
		' travellighttrait applyword
	"Altruiste" $trait
		($ "Je serai toujours ton garde du corps. Enfin, une fois.
		+ Sauve un coequipier de la mort lors d'un evenement textuel !
		- Ne peut le faire qu'une seule fois par partie !
		+ Commence avec une loyaute maximale !" .. herotype-lock $) $desc
		' herotypetrait applyword
	"Petit mangeur" $trait
		($ "Mange beaucoup moins que la normale ! Prends de toutes petites bouchees !
		+ Un repas complet ne necessite qu'1 de nourriture!!
		- A deux points de penalites en force!
		- A un point de penalite en forme physique." .. tinyeat-lock $) $desc
		' tinyeattrait applyword
	"Fan d'anime" $trait
		($ "C'est exactement comme mes animes de zombies !
		+ L'arme de depart est remplace par un Katana Surpuissant.
		- Le Katana ne peut pas etre lache, meme mort.
		- AVERTISSEMENT : Evitez d'avoir un moral trop elevee ! MEFIEZ-VOUS DES ANIMES !" .. animefan-lock $) $desc
		' animefantrait applyword
	"Specialiste" $trait
		($ "Un peu trop obsede par une seule methode d'eclatement de zombies.
		+ 2 points pour la force, la condition physique et le tir
		+ Peut depasser d'un point le maximum pour les statistiques ci-dessus !
		- Ne peut porter qu'UNE ARME a la fois !!" .. specialist-lock $) $desc
		' spectrait applyword
	"Grappler" $trait
		($ "Si un zombie tombe, tu peux le ramasser !
		+ Lancez ou frappez les zombies portes !
		- Personnalite ennuyeuse" .. grappler-lock $) $desc
		' grapplertrait applyword
	"Phenix" $trait
		($ "Le phenix renait de ses cendres ! *bouge ses bras comme s'il s'agissait d'ailes*
		+ Ressuscite a la mort, avec toute sa sante !!
		+ Inflammable ! Reste dans les flammes !
		- Perd le trait entier apres la premiere mort !" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"Savant Fou" $trait
		($ "Toujours destine a de grandes choses ! N'a jamais pris la peine de travailler pour cela.
		+ Obtient un bonus de 1 point au maximum pour toutes les competences !
		- Prend 1 coup de moins que la normale !
		- 2 points de penalite au moral maximum !" .. savant-lock $) $desc
		' savanttrait applyword
	"Apprends vite" $trait
		($ "Commence au bas de l'echelle, mais acquiert rapidement de nouvelles competences !
		+ Double les competences de tir, de mecanique et de medecine !
		- Chaque bonus de croissance s'arrete lorsque la competence atteint 4 points." .. fastlearn-lock $) $desc
		' fastlearntrait applyword


	// "Sommeil profond"
	// "Gourmand"
	// "Chercheur de ville"
	// "Voyage leger"

	// "Minuscule mangeur"
	// "Fan danime"
	// "Specialiste"
	// "Grappleur"
	// "Phenix"
	// ""
	// ""
	// ""
;

defperks

}
