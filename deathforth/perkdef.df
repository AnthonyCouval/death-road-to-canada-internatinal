perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "Markenwaffe" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"PARANOID AUF CHAR ANGEWENDET " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"OBLIVIOUS AUF CHAR ANGEWENDET " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"BANDIT AUF CHAR ANGEWANDT " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"CHARMANT AUF CHAR ANGEWANDT " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"GITTER AUF CHAR ANGEWANDT " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "Markenwaffe" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"WILDES GEMUT AUF CHAR ANGEWANDT " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"RUHE IM FEUER AUF CHAR ANGEWANDT " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"FURSORGLICH AUF CHAR ANGEWANDT " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if 
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"ERFINDERISCH AUF CHAR ANGEWANDT " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "Markenwaffe" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"PANISCHER JAMMERER AUF CHAR ANGEWANDT " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+ 
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"RESILIENTER TYP AUF CHAR ANGEWANDT " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"BERSERKER! AUF CHAR ANGEWANDT " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"ZIVILISIERT! AUF CHAR ANGEWANDT " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"GEHEIMNISVOLL AUF CHAR ANGEWANDT " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "Kampfkunstler" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"PRAKTISCH AUF CHAR ANGEWANDT " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+	
;

: warriortrait args( chara )
	"WARRIOR AUF CHAR ANGEWENDET " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"SPEZIALIST AUF CHAR ANGEWENDET " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "Pfeil und Bogen" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "Waffensammler" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "Pyromane" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"TRAVELLIGHT AUF CHAR ANGEWENDET " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+ 
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "Waffensammler" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"GRAPPLER AUF CHAR ANGEWENDET " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	
	<- chara .perk@ "Ex Wrestler" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then
	
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	"HEROTYPE AUF CHAR ANGEWENDET " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"SOUNDSLEEP AUF CHAR ANGEWENDET " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"GOURMAND AUF CHAR ANGEWENDET " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"CITYSEEKER AUF CHAR ANGEWENDET " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"TINYEATER AUF CHAR ANGEWENDET " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"ANIMEFAN AUF CHAR ANGEWENDET " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"PHOENIX AUF CHAR ANGEWENDET " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"SAVANT AUF CHAR ANGEWENDET " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"SCHNELLER LERNENDER AUF CHAR ANGEWENDET " type <- chara .name@ print
;
	
// Perks

: healthcareperk args( chara )
	"GESUNDHEITSWESEN AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;
	
: mechanicperk args( chara )
	"MECHANIKER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then	
	then WEAPON_WRENCH <- chara .weapona!
	
;

: athleteperk args( chara )
	"SPORTLER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then	
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"KAMPFER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"CHIRURG AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"GUNGINEER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"PISTOLE AUF CHAR ANGEWENDET " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"FLINTE AUF CHAR ANGEWENDET " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!	
;

: rifleperk args( chara )
	"GEWEHR AUF CHAR ANGEWENDET " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!	
;

: guncrazyperk args( chara )
	"GUNCRAZY AUF CHAR ANGEWENDET " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "Autonarr" $= ;

: carnutperk args( chara )
	"AUTO MUTTER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then	
	then crap-weapon <- chara .weapona!
// Commented out to fix the "vertraute Gesichter geben Auto gegen Willen" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"MEGABUFF AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+	
		else
			2 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"ULTRAFIT AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then	
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"BRUISER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+	
		else
			1 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_BOXING <- chara .weapon_default! 
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"KAMPFKUNSTLER AUF CHAR ANGEWENDET " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then	
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"FREUND DES HUNDES AUF CHAR ANGEWENDET " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"ENTDECKER ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	"EX RINGKAMPFER ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then 
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV 
;

: hiddenpotentialperk args( chara )
	"VERSTECKTESBEUTEL ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"HAGGLER ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"PFADFINDER ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"MARKENNAME ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM 
		then	
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"NATURSCHUSSEL ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+ 
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+ 
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+ 
		then 
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"T*S*T*C ANGEWENDET AUF CHARAKTER " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+ 
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+ 
		else
			-6 STAT_FITNESS <- chara .bonus+ 
		then 
	then 6 STAT_FITNESS <- chara .stat+ 
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"SCHUTZDERHEIM APPLIED ON CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Spezialist" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Spezialist" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"BOGEN UND PFEIL AUF CHAR ANGEWENDET " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Spezialist" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Spezialist" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Spezialist" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"PYROMANISCHER CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. "NACHSTE STUFE: " ;
: LOCKED cr$ .. cr$ .. RED .. 
	game.location 0 > if "GESPERRT! " else "GESPERRT: Im Perks & Traits Hut in Zombo Town freischalten" then
	
;
// Formerly : cr$ .. "NACHSTE STUFE: " rbold

: mechaniclevel 
	gstats{ perk-mechanic } 3 >= if
		($ "+ Erhalte 2 Punkte in Mechanik!		+ Erhalte 2 Punkte in Fitness!" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "+ Erhalte 2 Punkte in Mechanik!		+ Erhalte 1 Punkt in Fitness" .. NEXT_LEVEL .. "2 Punkte in Fitness!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Mechanik		+ Erhalte 1 Punkt in Fitness" .. 
		gstats{ perk-mechanic } 1 < if 
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "2 Punkte in Mechanik!"
		then $)
;

: athletelevel 
	gstats{ perk-athlete } 3 >= if
		($ "+ Erhalte 2 Punkte in Fitness!		+ Erhalte 2 Punkte in Starke!" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "+ Erhalte 2 Punkte in Fitness!		+ Erhalte 1 Punkt in Starke" .. NEXT_LEVEL .. "2 Punkte in Starke!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Fitness		+ Erhalte 1 Punkt in Starke" .. NEXT_LEVEL .. "2 Punkte in Fitness!" $)
;

: fighterlevel 
	gstats{ perk-fighter } 3 >= if
		($ "+ Erhalte 2 Punkte in Starke!		+ Erhalte 2 Punkte in Schieen!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "+ Erhalte 2 Punkte in Starke!		+ Erhalte 1 Punkt in Schieen" .. NEXT_LEVEL .. "2 Punkte im Schieen!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Starke		+ Erhalte 1 Punkt im Schieen" .. NEXT_LEVEL .. "2 Punkte in Starke!" $)
;

: surgeonlevel 
	gstats{ perk-surgeon } 3 >= if
		($ "+ Erhalte 2 Punkte in Medizin!		+ Erhalte 2 Punkte im Schieen!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "+ Erhalte 2 Punkte in Medizin!		+ Erhalte 1 Punkt im Schieen" .. NEXT_LEVEL .. "2 Punkte im Schieen!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Medizin		+ Erhalte 1 Punkt im Schieen" .. NEXT_LEVEL .. "2 Punkte in Medizin!" $)
;

: gungineerlevel 
	gstats{ perk-gungineer } 3 >= if
		($ "+ Erhalte 2 Punkte im Schieen!		+ Erhalte 2 Punkte in Mechanik!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "+ Erhalte 2 Punkte im Schieen!		+ Erhalte 1 Punkt in Mechanik" .. NEXT_LEVEL .. "2 Punkte in Mechanik!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt im Schieen		+ Erhalte 1 Punkt in Mechanik" .. NEXT_LEVEL .. "2 Punkte im Schieen!" $)
;

: healthcarelevel 
	gstats{ perk-healthcare } 3 >= if
		($ "+ Beginne mit 7 medizinischen Hilfsmitteln!		+ Erhalte 2 Punkte in Medizin!" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "+ Beginne mit 5 medizinischen Hilfsmitteln		+ Erhalte 2 Punkte in Medizin!" .. NEXT_LEVEL .. "7 medizinische Hilfsmittel!" $) 1 lvl
	then;
		($ "+ Beginne mit 4 medizinischen Hilfsmitteln		+ Erhalte 1 Punkt in Medizin" .. NEXT_LEVEL .. "5 medizinische Hilfsmittel, 2 in Medizin!" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "+ Gewinne 3 Punkte beim Schieen!" $) 2 lvl ;
: shotgunlevel ($ "+ Gewinne 3 Punkte beim Schieen!" $) 2 lvl ;
: riflelevel ($ "+ Gewinne 3 Punkte beim Schieen!" $) 2 lvl ;

: guncrazylevel 
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "3 beim Schieen und eine Schrotflinte!" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "2 beim Schieen und ein Gewehr!" $)
;

: carnutlevel 
	gstats{ perk-carnut } 3 >= if
		($ "+ Gewinne 3 Punkte beim Mechanischen!" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "+ Gewinne 2 Punkte beim Mechanischen" .. NEXT_LEVEL .. "3 Punkte beim Mechanischen!" $) 1 lvl
	then;
		($ "+ Gewinne 1 Punkt beim Mechanischen" .. NEXT_LEVEL .. "2 Punkte beim Mechanischen" $)
;

: megabufflevel 
	gstats{ perk-megabuff } 3 >= if
		($ "+ Gewinne 4 Punkte bei der Starke!" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "+ Gewinne 3 Punkte bei der Starke" .. NEXT_LEVEL .. "4 Punkte bei der Starke!" $) 1 lvl
	then;
		($ "+ Gewinne 2 Punkte bei der Starke" .. NEXT_LEVEL .. "3 Punkte bei der Starke" $)
;

: ultrafitlevel 
	gstats{ perk-ultrafit } 3 >= if
		($ "+ Gewinne 4 Punkte bei der Fitness!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "+ Gewinne 3 Punkte Fitness" .. NEXT_LEVEL .. "4 Punkte Fitness!" $) 1 lvl
	then;
		($ "+ Gewinne 2 Punkte Fitness" .. NEXT_LEVEL .. "3 Punkte Fitness" $)
;

: martialartistlevel 
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "+ Gewinne 2 Punkte Fitness, 1 in Starke" .. NEXT_LEVEL .. "3 Fitness, kann jetzt 1 uber Maximum gehen!" $) 1 lvl
	then;
		($ "+ Gewinne 1 Punkte Fitness, 1 in Starke" .. NEXT_LEVEL .. "2 Punkte Fitness" $)
;

: bruiserlevel 
	gstats{ perk-bruiser } 3 >= if
		($ "+ Gewinne 3 Punkte Starke!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "+ Gewinne 2 Punkte bei der Starke" .. NEXT_LEVEL .. "3 in Starke!" $) 1 lvl
	then;
		($ "+ Gewinne 1 Punkte Starke" .. NEXT_LEVEL .. "2 Punkte Starke" $)
;

: doglevel 
	gstats{ perk-dogfriend } 3 >= if
		($ "+ 70% extra Chance fur einen zufalligen Rekruten ein Hund zu sein" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "+ 35% extra Chance fur einen zufalligen Rekruten ein Hund zu sein" .. NEXT_LEVEL .. "70% chance!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "35% chance for recruits to be a dog" $)
;

: explorerlevel 
	gstats{ perk-explorer } 3 >= if
		($ "+ ABL rerolling kostet viel weniger Gas!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "+ ABL rerolling kostet weniger Gas" .. NEXT_LEVEL .. "Viel weniger Gas fur ABL Rerolls!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "Weniger Gas fur ABL Rerolls" $)
;

: exwrestlerlevel 
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Erhalte 2 Punkte in Fitness!		+ Erhalte 1 Punkt in Starke!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+ Erhalte 1 Punkt in Fitness		+ Erhalte 1 Punkt in Starke!" .. NEXT_LEVEL .. "2 Punkte in Fitness!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Fitness" .. 
		gstats{ perk-exwrestler } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 Punkt in Starke!"
		then $)
;

: hiddenpotentiallevel 
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+ Erhalte 1 Punkt in der ungepickten Fertigkeit		+ Erhalte 1 letzten Punkt in Starke oder Fitness, zufallig!" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "+ Erhalte 1 Punkt in der anderen Fertigkeit" .. NEXT_LEVEL .. "Zufalliger Punkt in Fitness oder Starke!" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "1 Punkt in der anderen Fertigkeit" $)
		then
;

: hagglerlevel 
	gstats{ perk-haggler } 3 >= if
		($ "+ Die Gebuhren der Rauber sind geringer!" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "+ Die Gebuhren der Rauber sind geringer" .. NEXT_LEVEL .. "Von jetzt an noch kleinere Gebuhren!" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "Die Gebuhren der Rauber sind geringer" $)
		then
;

: pathfinderlevel 
	gstats{ perk-pathfinder } 3 >= if
		($ "+ 75% Chance am 2 Gehstag Strafen zu umgehen!" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "+ 60% Chance am 2 Gehstag eine Strafe zu umgehen" .. NEXT_LEVEL .. "75% Chance!" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "60% Chance am 2 Gehstag eine Strafe zu umgehen" $)
		then
;

: trademarklevel 
	gstats{ perk-trademark } 3 >= if
		($ "+ Standardwaffe Robustes Messer!!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "+ Standardwaffe: 50% Chance Aluminiumtritt, 50% Messer" .. NEXT_LEVEL .. "100% Chance fur ein robustes Messer!" $) 1 lvl
	then;
		($ "+ Standardwaffe ist ein Aluminiumtritt!" ..
		gstats{ perk-trademark } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "50% Chance auf ein robustes Machete!" $)
		then $)
;

: naturalshotlevel 
	gstats{ perk-naturalshot } 3 >= if
		($ "+ Erhalte 2 Punkte in Schieen!		+ Schieen kann um 2 Punkte uber das ubliche Maximum hinausgehen!" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "+ Erhalte 2 Punkte in Schieen!		+ Schieen kann um 1 Punkt uber das ubliche Maximum hinausgehen" .. NEXT_LEVEL .. "2 uber Maximum!" $) 1 lvl
	then;
		($ "+ Erhalte 1 Punkt in Schieen		+ Schieen kann um 1 Punkt uber das ubliche Maximum hinausgehen" .. 
		gstats{ perk-naturalshot } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 Punkte im Schieen!"
		then $)
;

: tstclevel 
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ "Fitness beginnt bei 2!" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ "Fitness beginnt bei 1" .. NEXT_LEVEL .. "Fitness steigt auf 2!" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "Fitness steigt auf 1" $)
		then
;

: shieldofhopelevel 
	gstats{ perk-shieldofhope } 3 >= if
		($ "  du verlierst 2 Moral jedes Mal wenn du dem Tod entkommst!" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "  du verlierst 3 Moral jedes Mal wenn du dem Tod entkommst" .. NEXT_LEVEL .. "Nur 2 Moral!" $) 1 lvl
	then;
		($ "  du verlierst 4 Moral jedes Mal wenn du dem Tod entkommst" ..
		gstats{ perk-shieldofhope } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "3 Moral verloren"
		then $)
;

: archerlevel
		($ "+ Mache Pfeile fur deinen Bogen zwischen den Missionen, " $) ..
	gstats{ perk-archer } 3 >= if
		($ "bis zu 10!" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "bis zu 7" .. NEXT_LEVEL .. "Erstelle 10 Pfeile!" $) 1 lvl
	then;
		($ "bis zu 4" ..
		gstats{ perk-archer } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Erstelle 7 Pfeile"
		then $)
;

: pyrolevel
		($ "+ Lade deinen Lotbrenner zwischen den Missionen auf, " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "bis zu 8 Ladungen!" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "bis zu 6 Ladungen" .. NEXT_LEVEL .. "Finde 8 Ladungen!" $) 1 lvl
	then;
		($ "bis zu 4 Ladungen" ..
		gstats{ perk-pyro } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Finde 6 Ladungen"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"Mechaniker" $perk
		($ "Deutsch sein" .. mechaniclevel $) $desc
		' mechanicperk applyword
		
	"Athlet" $perk
		($ "Eine sportliche Vergangenheit ist fur das Uberleben von Zombies von Vorteil.		+ Starte mit einer zufalligen Sportwaffe		" .. athletelevel $) $desc
		' athleteperk applyword
		
	"Kampfer" $perk
		($ "Diese Person war schon immer ein echter Kampfer.		+ Starte mit einem Beil		" .. fighterlevel $) $desc
		' fighterperk applyword
		
	"Chirurg" $perk
		($ "Hat eine gute Intuition fur Anatomie und eine wirklich ruhige Hand.		+ Starte mit einem Skalpell		" .. surgeonlevel $) $desc
		' surgeonperk applyword
		
	"Waffenmechaniker" $perk
		($ "Gut mit allem, was mechanisch ist, und Waffen sind mechanisch.		+ Starte mit einem Brecheisen		" .. gungineerlevel $) $desc
		' gungineerperk applyword
		
(*	"Pistolenschutze" $perk
		($ "Pistolen zielen schnell und Munition gibt es reichlich!		+ Starte mit einer Pistole und 30 Kugeln		" .. pistollevel $) $desc
		' pistolperk applyword
		
	"Gewehrschutze" $perk
		($ "Ein Gewehrschuss kann eine Reihe von Zombies durchbohren, in den richtigen Handen!		+ Starte mit einem Gewehr und 24 Munition		" .. riflelevel $) $desc
		' rifleperk applyword
		
	"Schrotflintenschutze" $perk
		($ "Jeder wei dass Schrotflinten die wahre Anti Zombie Waffe sind!		+ Starte mit einer Schrotflinte und 15 Patronen" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"Kampfkunstler" $perk
		($ "Keine Waffen? Kein Problem!		+ Beginne mit einem machtigen Zwei Treffer Nahkampfangriff!!		  Verweigert die Benutzung von Schusswaffen, Kettensagen und einigen anderen!!		" .. martialartistlevel $) $desc
		' martialartistperk applyword		
		
	"Groer Schlager" $perk
		($ "Bewegt sich langsam, trifft richtig hart, steckt Schlage ein!		+ Beginne mit einem besseren Nahkampfangriff! Stecke einen Treffer mehr als normal ein!		  Langsamere Gehgeschwindigkeit!		" .. bruiserlevel $) $desc
		' bruiserperk applyword
	
	"Waffensammler" $perk
		($ "Du wusstest dass es irgendwann nutzlich sein wurde all diese Waffen zu horten! Du wusstest es einfach!		" .. guncrazylevel $) $desc
		' guncrazyperk applyword
	
	"Gesundheitsfursorge" $perk
		($ "Arschlocher werden standig von Zombies gebissen. Sei besser vorbereitet! 		" .. healthcarelevel $) $desc
		' healthcareperk applyword	
		
	"Autonarr" $perk
		($ "Ein Autoliebhaber zu sein ist jetzt praktisch eine Superkraft!		+ Beginne mit einem schoneren Auto		" .. carnutlevel $) $desc
		' carnutperk applyword
				
	"Megabuff" $perk
		($ "Moglicherweise zu aufgepumpt um es zu kontrollieren. Praktisch zum Aufheben und Werfen schwerer Mobel!		+ Beginne mit einem Metallrohr		" .. megabufflevel $) $desc
		' megabuffperk applyword
		
	"Ultrafit" $perk
		($ "Das ganze Yoga hat sich wirklich ausgezahlt!		+ Beginne mit ein paar Musliriegeln		" .. ultrafitlevel $) $desc 
		' ultrafitperk applyword
				
	"Freund des Hundes" $perk
		($ "Diese Person liebt Hunde und trifft sie oft!		+ Wutende Hunde konnen freundlich werden		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Entdecker" $perk
		($ "Manche Leute haben einfach einen wirklich guten Orientierungssinn beim Autofahren!		+ Erhalte eine zusatzliche Standortwahl wahrend Immer Plundern Events!		" .. explorerlevel $) $desc
		' explorerperk applyword
		
	"Ex Wrestler" $perk
		($ "War ein Spitzenreiter vor einem tragischen Missgeschick im Ring!		+ Hebe niedergeschlagene Zombies auf und wirf oder schmettere sie!		  Groe Strafe auf maximale Schiefertigkeit.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword
		
	"Verstecktes Potenzial" $perk
		($ "Sieht unscheinbar aus, kann aber andere mit Training ubertreffen!		+ Erhalte zufallig einen Punkt in Starke oder Fitness. Er kann dann 1 uber das Maximum hinausgehen!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword
	
	"Bestseller" $perk
		($ "Gutes Verkaufstalent hat immer noch seine eigene Nische!		+ Erhalte 1 8 zusatzliche Nahrung beim Verkauf an einen Waffenkaufer, abhangig vom ursprunglichen Preis.		+ Keine Moralstrafe bei der Bezahlung von Banditenzollen mit Nahrung!		" .. hagglerlevel $) $desc
		' hagglerperk applyword
	
	"Pfadfinder" $perk
		($ "Wandererfahrung hilft, Waldschrecken zu vermeiden!		+ Entfernt ein Strafereignis vom ersten Wandertag, jedes Mal, wenn du das Auto verlierst!		" .. pathfinderlevel $) $desc
		' pathfinderperk applyword
	
	"Markenwaffe" $perk
		($ "Sticht mit einer einzigartigen Waffe aus der Masse heraus!		+ Startet mit einer Spezialwaffe, abhangig vom Merkmal!		  Kann diese Waffe nicht fallen lassen, auch nicht im Tod.		" .. trademarklevel $) $desc
		' trademarkperk applyword
		
	"Naturlicher Schutze" $perk
		($ "Ein Naturtalent im Schieen! Braucht nur mehr Training und vielleicht sogar eine Waffe und Munition!		" .. naturalshotlevel $) $desc
		' naturalshotperk applyword
	
	"T*S*T*C" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword
		
	"Schild der Hoffnung" $perk
		($ "Halt mit purer Willenskraft durch!		+ Schutzt vor todlichen Treffern wenn die Moral uber :" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword
		
	"Pfeil und Bogen" $perk
		($ "Bogenschieen erwies sich als nutzliches Hobby!		+ Beginne mit einem lautlosen Bogen, 30 Pfeilen, 2 Punkten in Starke!		  Kann diesen Bogen nicht fallen lassen, auch nicht im Tod.		" .. archerlevel $) $desc
		' archerperk applyword
		
	"Pyromane" $perk
		($ "'Zombies sind extrem entzundlich!		+ Beginne mit einem Lotbrenner und Schutz vor Feuer!		  Kann diesen Lotbrenner nicht fallen lassen, auch nicht im Tod.		" .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"TEST" i .. $perk
		($ "Bogenschieen erwies sich als nutzliches Hobby!		+ Beginne mit einem lautlosen Bogen, 30 Pfeilen, 2 Punkten in Starke!		  Kann diesen Bogen nicht fallen lassen, auch nicht im Tod.		" .. archerlevel $) $desc
		' archerperk applyword
	next
*)
		
	// "Barbar"
	// "Home Run Champ"
	// "Wild"
			
	// Traits
	"Paranoid" $trait
		"Eine Kombination aus hoher Wahrnehmung und extremem Pessimismus lasst jemanden sich auf das Schlimmste vorbereiten!		+ Kann Eigenschaften bei neuen Rekruten erkennen		+ Immer auf der Suche nach Gefahr		  Kann ein echter Miesepeter sein" $desc
		' paranoidtrait applyword
	"Vergesslich" $trait
		"Eine groartige Lebenseinstellung kombiniert mit geringer Wahrnehmung ermoglicht einige magische Verleugnungsleistungen!		+ Kann Verzweiflung ignorieren		  Schlechte Wurfe fur Wahrnehmung und Verstand" $desc
		' oblivtrait applyword
	"Charmant" $trait
		"'Durch die Wahrnehmung anderer, eine gute Einstellung und pure Ausstrahlung hat diese Person etwas, das Turen offnet!		+ Charmiert sich zu kostenlosen Dingen oder aus schlechten Situationen		  Kann sich nicht aus allem herauscharmieren" $desc
		' charmtrait applyword
	"Reizend" $trait
		"This person thinks they're soooooo cool. But they're not! They're just annoying!
		+ Tell people to 'Cool it'
		- Anger pretty much everybody" $desc
		' gratingtrait applyword
	"Bandit" $trait
		"Untreue zu sein kann in der Postapokalypse ein Vorteil sein.		+ Andere abzocken		  Die Gruppe abzocken		  Zeitbombe" $desc
		' bandittrait applyword
	"Geheimnisvolle Vergangenheit" $trait
		"This person... has a mysterious past......
		+ 3 points given to fight skills at random
		- Randomized and extreme personality!" $desc
		' mysterytrait applyword
	"Praktisch" $trait
		"Hat eine Vielzahl nutzlicher Fahigkeiten, ist aber irgendwie langweilig.      + 3 Punkte zufallig auf Kampffertigkeiten gegeben      + 3 Punkte zufallig auf Unterstutzungskompetenzen gegeben        Langweilige Personlichkeit" $desc
		' practicaltrait applyword
	"Krieger" $trait
		"Guter Start auf Zombie Schlagfahigkeiten, mit einer unscheinbaren Personlichkeit.      + 2 Punkte mehr Starke!      + 2 Punkte mehr Fitness!        Langweilige Personlichkeit" $desc
		' warriortrait applyword
	"Heiblutig" $trait
		"'Jemand hat ein schlimmes Temperament! Die Aggression kann nutzlich sein.      + 1 zusatzlicher Punkt in Starke        Schlechte Laune aufgrund geringer Gelassenheit      + Temperament kann manchmal gut sein" $desc
		' fiercetrait applyword
	"Ruhe unter Feuer" $trait
		"Ruhig und gelassen. Nutzlich wenn man in eine Horde schiet!      + Sehr ruhig aufgrund hoher Gelassenheit      + 1 zusatzlicher Punkt beim Schieen" $desc
		' calmtrait applyword
	"Pflege" $trait
		"Immer an andere denken! Irgendwie noch kein Zombiefutter.      + 2 Punkte mehr medizinisch! Tolle Einstellung      + Kann einen uber das Maximum fur medizinische Fahigkeiten hinausgehen!!        Kann eine Handlung sein" $desc
		' nurturetrait applyword
	"Erfinderisch" $trait
		"Bequem mit Maschinen wie Autos.      + 2 Punkte mehr mechanisch! Tolle Verstandsprufungen!      + Kann einen uber das Maximum fur mechanische Fahigkeiten hinausgehen!!        Benotigt moglicherweise mehr Ubung, um das Auto zu reparieren" $desc
		' inventtrait applyword
	"Frantischer Jammerer" $trait
		"Eher zerbrechliche Sorte. Aber richtig gut in der Flucht!		+ Bonus auf Laufgeschwindigkeit!		  Halt einen Treffer weniger aus als normal		  Schlechte Einstellung" $desc
		' frantictrait applyword
	"Hartnackiger Typ" $trait
		"Wirklich zah! Der Muskel! Kein Langzeitplaner.		+ Halt einen Treffer mehr aus als normal		  Schlechte Verstandeswurfe" $desc
		' toughtrait applyword
	"BERSERKER!" $trait
		"Destroy all zombies! Never retreat! Oh no, I got bit!
		+ 4 points to strength, fitness, and shooting!!
		+ Can go one over the maximum for the above stats!!!
		- Super low personality stats! Dies in one bite!!" $desc
		' berserktrait applyword
	"Zivilisiert" $trait
		"Bewahrt alte Werte bevor die Welt verruckt wurde. Das ist gut und schlecht.		+ Superhohe Loyalitats  und Personlichkeitswerte!		+ 1 Punkt auf medizinische und mechanische Fahigkeiten!!		  Dauerhafte und erhebliche Moralstrafe!!" $desc
		' civiltrait applyword
	"Fester Schlafer" $trait
		($ "Schlaft jederzeit und uberall. Die Nummer 1 im Schlafen!		+ Ubermenschliches Schlafen! Braucht sehr wenig Schlaf.		+ Bekommt nie den Status MUDE, nie." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"Gourmand" $trait
		($ "'Schatzt altes Dosenfutter sehr!		+ Das Essen einer vollen Mahlzeit stellt 1 Punkt der Moral dieses Charakters wieder her, bis zur vollen Hohe! Erhalt einen zusatzlichen Punkt maximale Gesundheit!		  Isst etwas mehr, 3 Nahrung statt 2. Ein niedriger Nahrungsvorrat verringert die Moral schneller!" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Stadtforscher" $trait
		($ "Mit einem interessanten Leben gesegnet!		+ Viel groere Chance ein seltsames Gebaude oder einen seltsamen Charakter bei Beuteereignissen in der Stadt zu finden! Normale Chance: 10%  Mit Eigenschaft: 50%		+ Verdoppelt die Chance seltene Handlerlager zu finden!" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Leicht reisen" $trait
		($ "Tragen Sie weniger damit Sie etwas schneller laufen konnen!		+ Bonus auf Laufgeschwindigkeit!		+ 1 Punkt mehr in Fitness!		  Kann nur zwei Waffen gleichzeitig tragen!" .. travellight-lock $) $desc
		' travellighttrait applyword
	"Heldentyp" $trait
		($ "'Ich werde immer dein Leibwachter sein. Nun, einmal.		+ Rettet einen Teamkollegen vor dem Tod in einem Textereignis!		  Macht das nur einmal pro Spiel!		+ Beginnt mit maximaler Loyalitat!" .. herotype-lock $) $desc
		' herotypetrait applyword
	"Tiny Eater" $trait
		($ "Isst viel weniger als normal! Nimmt winzige Bissen!		+ Eine volle Mahlzeit benotigt nur 1 Nahrung!!		  Erhalt eine 2 Punkte Strafe auf die maximale Starke!		  Erhalt einen 1 Punkt Malus auf die maximale Fitness." .. tinyeat-lock $) $desc
		' tinyeattrait applyword	
	"Anime Fan" $trait
		($ "'Das ist genau wie in meinen Zombie Animes!		+ Die Waffe wird durch ein ubermachtiges starkes Katana ersetzt.		  Katana kann nicht fallen gelassen werden, auch nicht beim Tod.		  WARNUNG: Vermeiden Sie es, die volle Moral zu erreichen! HUTEN SIE SICH VOR ANIME!" .. animefan-lock $) $desc
		' animefantrait applyword	
	"Spezialist" $trait
		($ "Ein wenig zu fixiert auf eine Methode des Zombie Zerplatzens.		+ 2 Punkte auf Starke, Fitness und Schieen		+ Kann fur die oben genannten Statistiken eins uber das Maximum gehen!!		  Kann nur EINE WAFFE gleichzeitig tragen!!" .. specialist-lock $) $desc
		' spectrait applyword
	"Grappler" $trait
		($ "Wenn ein Zombie hinfallt, kannst du ihn aufheben!		+ Werfe oder schlage getragene Zombies!		  Langweilige Personlichkeit" .. grappler-lock $) $desc
		' grapplertrait applyword
	"Phoenix" $trait
		($ "Der Phonix erhebt sich aus der Asche! *flattert mit den Armen wie Flugeln*		+ Belebt sich selbst nach dem Tod wieder auf volle Gesundheit!!		+ Entzundlich! Steh in den Flammen!		  Verliert den gesamten Zug nach dem ersten Tod!" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"Dingus Savant" $trait
		($ "Immer fur Groes bestimmt! Habe mich nie darum gekummert dafur zu arbeiten.		+ Erhalt einen Bonus von 1 Punkt auf das Maximum fur alle Fertigkeiten!		  Nimmt 1 Treffer weniger als normal!		  2 Punkte Abzug auf die maximale Moral!" .. savant-lock $) $desc
		' savanttrait applyword
	"Schneller Lerner" $trait
		($ "Beginnt niedrig, lernt aber schnell neue Fahigkeiten!		+ Erhalt die doppelte Menge an Schie , Mechanik  und medizinischen Fahigkeiten!		  Jeder Wachstumsbonus endet, nachdem seine Fertigkeit 4 Punkte erreicht hat" .. fastlearn-lock $) $desc
		' fastlearntrait applyword
	
		
	// "Fester Schlafer"
	// "Gourmand"
	// "Stadtforscher"
	// "Leicht reisen"
	
	// "Tiny Eater"
	// "Anime Fan"
	// "Spezialist"
	// "Grappler"
	// "Phoenix"
	// ""
	// ""
	// ""
;

defperks

}
