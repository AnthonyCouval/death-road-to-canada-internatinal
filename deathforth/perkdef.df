perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "Arma de Marca Registrada" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"PARANOICO APLICADO EN EL PERSONAJE " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"OLVIDADIZO APLICADO EN EL PERSONAJE " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"BANDIDO APLICADO EN EL PERSONAJE " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"ENCANTADOR APLICADO EN EL PERSONAJE " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"DESAGRADABLE APLICADO EN EL PERSONAJE " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "Arma de Marca Registrada" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"TEMPERAMENTO FEROZ APLICADO A CARACTER " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"CALMA BAJO FUEGO APLICADA A CARACTER " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"CUIDADOSO APLICADO A CARACTER " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if 
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"INGENIOSO APLICADO A CARACTER " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "Arma de Marca Registrada" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"LLORON FRENETICO APLICADO A CARACTER " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+ 
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"TIPO RESILIENTE APLICADO A CARACTER " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"BERSERKER! APLICADO A CARACTER " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"CIVILIZADO! APLICADO A CARACTER " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"MISTERIOSO APLICADO A CARACTER " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "Artista marcial" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"PRACTICO APLICADO A CARACTER " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+	
;

: warriortrait args( chara )
	"GUERRERO APLICADO EN CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"ESPECIALISTA APLICADO A CHAR " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "Arco y flechas" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "Coleccionista de armas" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "Piromaniaco" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"TRAVELLIGHT APLICADO A CHAR " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+ 
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "Coleccionista de armas" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"GRAPPLER APLICADO A CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	
	<- chara .perk@ "Exluchador" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then
	
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	"HEROTYPE APLICADO A CHAR " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"SOUNDSLEEP APLICADO A CHAR " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"GOURMAND APLICADO A CHAR " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"CITYSEEKER APLICADO A CHAR " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"TINYEATER APLICADO A CHAR " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"ANIMEFAN APLICADO A CHAR " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"PHOENIX APLICADO A CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"SAVANT APLICADO A CHAR " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"APRENDIZAJE RAPIDO APLICADO EN EL CAR " type <- chara .name@ print
;
	
// Perks

: healthcareperk args( chara )
	"ASISTENCIA SANITARIA APLICADA EN EL CAR " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;
	
: mechanicperk args( chara )
	"MECANICO APLICADO EN EL CAR " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then	
	then WEAPON_WRENCH <- chara .weapona!
	
;

: athleteperk args( chara )
	"ATLETA APLICADO EN EL CAR " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then	
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"LUCHADOR APLICADO EN EL CAR " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"CIRUJANO APLICADO EN EL CAR " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"GUNGINEER APLICADO EN EL CAR " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"PISTOLA APLICADA EN EL CAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"SHOTGUN APLICADO EN CHAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!	
;

: rifleperk args( chara )
	"RIFLE APLICADO EN CHAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!	
;

: guncrazyperk args( chara )
	"GUNCRAZY APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "Car Nut" $= ;

: carnutperk args( chara )
	"CAR NUT APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then	
	then crap-weapon <- chara .weapona!
// Commented out to fix the "caras familiares da coche contra la voluntad" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"MEGABUFF APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+	
		else
			2 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"ULTRAFIT APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then	
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"BRUISER APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+	
		else
			1 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_BOXING <- chara .weapon_default! 
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"MARTIAL ARTIST APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then	
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"FRIEND OF DOG APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"EXPLORER APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	"EX WRESTLER APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then 
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV 
;

: hiddenpotentialperk args( chara )
	"HIDDENPOT APLICADO EN CHAR " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"REGATEADOR APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"PATHFINDER APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"MARCA REGISTRADA APLICADA EN CHAR " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM 
		then	
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"NATURALSHOT APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+ 
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+ 
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+ 
		then 
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"T*S*T*C APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+ 
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+ 
		else
			-6 STAT_FITNESS <- chara .bonus+ 
		then 
	then 6 STAT_FITNESS <- chara .stat+ 
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"SHIELDOFHOPE APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Especialista" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Especialista" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"BOW AND ARROW APLICADO EN CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Especialista" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Especialista" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Especialista" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"PIROMANO CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. " Solo 2 de moral!" ;
: LOCKED cr$ .. cr$ .. RED .. 
	game.location 0 > if "BLOQUEADO! " else "BLOQUEADO: Desbloquear en Perks & Traits Hut en Zombo Town" then
	
;
// Formerly : cr$ .. " Solo 2 de moral!" rbold

: mechaniclevel 
	gstats{ perk-mechanic } 3 >= if
		($ "+ Gana 2 puntos en mecanica!		+ Gana 2 puntos en fitness!" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "+ Gana 2 puntos en mecanica!		+ Gana 1 punto en fitness" .. NEXT_LEVEL .. "2 puntos en forma fisica!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en mecanica		+ Gana 1 punto en forma fisica" .. 
		gstats{ perk-mechanic } 1 < if 
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "2 puntos en mecanica!"
		then $)
;

: athletelevel 
	gstats{ perk-athlete } 3 >= if
		($ "+ Gana 2 puntos en forma fisica!		+ Gana 2 puntos en fuerza!" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "+ Gana 2 puntos en forma fisica!		+ Gana 1 punto en fuerza" .. NEXT_LEVEL .. "2 puntos en fuerza!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en forma fisica		+ Gana 1 punto en fuerza" .. NEXT_LEVEL .. "2 puntos en forma fisica!" $)
;

: fighterlevel 
	gstats{ perk-fighter } 3 >= if
		($ "+ Gana 2 puntos en fuerza!		+ Gana 2 puntos en tiro!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "+ Gana 2 puntos en fuerza!		+ Gana 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en tiro!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en fuerza		+ Gana 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en fuerza!" $)
;

: surgeonlevel 
	gstats{ perk-surgeon } 3 >= if
		($ "+ Gana 2 puntos en medicina!		+ Gana 2 puntos en tiro!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "+ Gana 2 puntos en medicina!		+ Gana 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en tiro!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en medicina		+ Gana 1 punto en tiro" .. NEXT_LEVEL .. "dos puntos en medico!" $)
;

: gungineerlevel 
	gstats{ perk-gungineer } 3 >= if
		($ "+ Obtener 2 puntos de tiro!		+ Obtener 2 puntos de mecanica!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "+ Obtener 2 puntos de tiro!		+ Obtener 1 punto de mecanica" .. NEXT_LEVEL .. "2 puntos en mecanica!" $) 1 lvl
	then;
		($ "+ Obtener 1 punto de tiro		+ Obtener 1 punto de mecanica" .. NEXT_LEVEL .. "2 puntos en tiro!" $)
;

: healthcarelevel 
	gstats{ perk-healthcare } 3 >= if
		($ "+ Empieza con 7 suministros medicos!		+ Obtener 2 puntos en medico!" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "+ Empieza con 5 suministros medicos		+ Obtener 2 puntos en medico!" .. NEXT_LEVEL .. "7 suministros medicos!" $) 1 lvl
	then;
		($ "+ Empieza con 4 suministros medicos		+ Obtener 1 punto de medico" .. NEXT_LEVEL .. "5 suministros medicos, 2 en medico!" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "+ Obtener 3 puntos de tiro!" $) 2 lvl ;
: shotgunlevel ($ "+ Obtener 3 puntos de tiro!" $) 2 lvl ;
: riflelevel ($ "+ Obtener 3 puntos de tiro!" $) 2 lvl ;

: guncrazylevel 
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "3 en tiro, y un escopeton!" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "2 en tiro, y un fusil!" $)
;

: carnutlevel 
	gstats{ perk-carnut } 3 >= if
		($ "+ Gana 3 puntos en mecanica!" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "+ Gana 2 puntos en mecanica" .. NEXT_LEVEL .. "3 puntos en mecanica!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en mecanica" .. NEXT_LEVEL .. "2 puntos en mecanica" $)
;

: megabufflevel 
	gstats{ perk-megabuff } 3 >= if
		($ "+ Gana 4 puntos en fuerza!" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "+ Gana 3 puntos en fuerza" .. NEXT_LEVEL .. "4 puntos en fuerza!" $) 1 lvl
	then;
		($ "+ Gana 2 puntos en fuerza" .. NEXT_LEVEL .. "3 puntos en fuerza" $)
;

: ultrafitlevel 
	gstats{ perk-ultrafit } 3 >= if
		($ "+ Gana 4 puntos en fitness!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "+ Gana 3 puntos en fitness" .. NEXT_LEVEL .. "4 puntos en fitness!" $) 1 lvl
	then;
		($ "+ Gana 2 puntos en fitness" .. NEXT_LEVEL .. "3 puntos en fitness" $)
;

: martialartistlevel 
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "+ Gana 2 puntos en fitness, 1 en fuerza" .. NEXT_LEVEL .. "3 fitness, ahora puedes superar el maximo!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en fitness, 1 en fuerza" .. NEXT_LEVEL .. "2 puntos en fitness" $)
;

: bruiserlevel 
	gstats{ perk-bruiser } 3 >= if
		($ "+ Gana 3 puntos en fuerza!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "+ Gana 2 puntos en fuerza" .. NEXT_LEVEL .. "3 en fuerza!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en fuerza" .. NEXT_LEVEL .. "2 puntos en fuerza" $)
;

: doglevel 
	gstats{ perk-dogfriend } 3 >= if
		($ "+ 70% de probabilidad extra de que un recluta aleatorio sea un perro" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "+ 35% de probabilidad extra de que un recluta aleatorio sea un perro" .. NEXT_LEVEL .. "70% de probabilidad!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "35% de probabilidad de que los reclutas sean un perro" $)
;

: explorerlevel 
	gstats{ perk-explorer } 3 >= if
		($ "+ ABL rerolling costs much less gas!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "more gas for other things" .. NEXT_LEVEL .. "Mucho menos gas para los rerolls de ABL!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "More gas for ABL rerolls" $)
;

: exwrestlerlevel 
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Obten 2 puntos en fitness!		+ Obten 1 punto en fuerza!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+ Obten 1 punto en fitness		+ Obten 1 punto en fuerza!" .. NEXT_LEVEL .. "2 puntos en forma fisica!" $) 1 lvl
	then;
		($ "+ Obten 1 punto en fitness" .. 
		gstats{ perk-exwrestler } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 punto en fuerza!"
		then $)
;

: hiddenpotentiallevel 
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+ Gana 1 punto en la habilidad no seleccionada		+ Gana 1 punto final en fuerza o estado fisico, al azar!" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "+ Gana 1 punto en la otra habilidad" .. NEXT_LEVEL .. "Punto aleatorio en estado fisico o fuerza!" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "1 punto en la otra habilidad" $)
		then
;

: hagglerlevel 
	gstats{ perk-haggler } 3 >= if
		($ "+ Los peajes de los bandidos son menores!" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "+ Los peajes de los bandidos son menores" .. NEXT_LEVEL .. "Peajes aun mas bajos!" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "Los peajes de los bandidos son menores" $)
		then
;

: pathfinderlevel 
	gstats{ perk-pathfinder } 3 >= if
		($ "+ 75% de probabilidad de saltarse las penalizaciones para el 2 dia de caminata!" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "+ 60% de probabilidad de saltarse la penalizacion para el 2 dia de caminata" .. NEXT_LEVEL .. "75% de probabilidad!" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "60% de probabilidad de saltarse la penalizacion para el 2 dia de caminata" $)
		then
;

: trademarklevel 
	gstats{ perk-trademark } 3 >= if
		($ "+ El arma predeterminada es un machete resistente!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "50% chance aluminum bat, 50% chance machete" .. NEXT_LEVEL .. "100% chance of sturdy machete!" $) 1 lvl
	then;
		($ "+ El arma predeterminada es un bate de aluminio!" ..
		gstats{ perk-trademark } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. " 50% de probabilidad de machete resistente!" $)
		then $)
;

: naturalshotlevel 
	gstats{ perk-naturalshot } 3 >= if
		($ "+ Gana 2 puntos en disparo!		+ El disparo puede superar en 2 puntos el maximo habitual!" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "+ Gana 2 puntos en disparo!		+ El disparo puede superar en 1 punto el maximo habitual" .. NEXT_LEVEL .. " 2 por encima del maximo!" $) 1 lvl
	then;
		($ "+ Gana 1 punto en disparo		+ El disparo puede superar en 1 punto el maximo habitual" .. 
		gstats{ perk-naturalshot } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 puntos en tiro!"
		then $)
;

: tstclevel 
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ " La condicion fisica comienza en 2!" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ " La condicion fisica comienza en 1" .. NEXT_LEVEL .. " La condicion fisica aumenta a 2!" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. " La condicion fisica aumenta a 1" $)
		then
;

: shieldofhopelevel 
	gstats{ perk-shieldofhope } 3 >= if
		($ "  pierdes 2 de moral cada vez que evades la muerte!" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "  pierdes 3 de moral cada vez que evades la muerte" .. NEXT_LEVEL .. " Solo 2 de moral!" $) 1 lvl
	then;
		($ "  pierdes 4 de moral cada vez que evades la muerte" ..
		gstats{ perk-shieldofhope } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "3 moral perdido"
		then $)
;

: archerlevel
		($ "+ Fabrica flechas para tu arco entre misiones, " $) ..
	gstats{ perk-archer } 3 >= if
		($ "hasta 10!" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "hasta 7" .. NEXT_LEVEL .. "Crea 10 flechas!" $) 1 lvl
	then;
		($ "hasta 4" ..
		gstats{ perk-archer } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Crea 7 flechas"
		then $)
;

: pyrolevel
		($ "+ Recarga tu soplete entre misiones, " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "hasta 8 cargas!" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "hasta 6 cargas" .. NEXT_LEVEL .. "Encuentra 8 cargas!" $) 1 lvl
	then;
		($ "hasta 4 cargas" ..
		gstats{ perk-pyro } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Encuentra 6 cargas"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"Mecanico" $perk
		($ "El auto es vida! Nota: No necesariamente un mecanico COMPETENTE.		+ Comienza con una llave		" .. mechaniclevel $) $desc
		' mechanicperk applyword
		
	"Atleta" $perk
		($ "Un pasado atletico se traduce bien en la supervivencia de zombis.		+ Comienza con un arma deportiva aleatoria		" .. athletelevel $) $desc
		' athleteperk applyword
		
	"Luchador" $perk
		($ "Esta persona siempre ha sido un verdadero luchador.		+ Comienza con un hacha		" .. fighterlevel $) $desc
		' fighterperk applyword
		
	"Cirujano" $perk
		($ "Tiene una buena intuicion de la anatomia y una mano realmente firme.		+ Comienza con un bisturi		" .. surgeonlevel $) $desc
		' surgeonperk applyword
		
	"Armero" $perk
		($ "Bueno con cualquier cosa mecanica, y las armas son mecanicas.		+ Comienza con una palanca		" .. gungineerlevel $) $desc
		' gungineerperk applyword
		
(*	"Pistolero" $perk
		($ "Las pistolas apuntan rapido y la municion es abundante!		+ Comienza con una pistola y 30 balas		" .. pistollevel $) $desc
		' pistolperk applyword
		
	"Tirador de rifle" $perk
		($ "Un disparo de rifle puede atravesar una linea de zombis, en las manos adecuadas!		+ Comienza con un rifle y 24 municiones		" .. riflelevel $) $desc
		' rifleperk applyword
		
	"Escopeta" $perk
		($ "Todos saben que las escopetas son la verdadera arma antizombi!		+ Comienza con una escopeta y 15 proyectiles		" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"Artista marcial" $perk
		($ "No hay armas? No hay problema!		+ Comienza con un poderoso ataque desarmado de dos golpes!		  Se niega a usar armas de fuego, motosierras y algunas otras!		" .. martialartistlevel $) $desc
		' martialartistperk applyword		
		
	"Gran maton" $perk
		($ "Se mueve lento, golpea muy fuerte, recibe una paliza!		+ Comienza con un mejor ataque desarmado! Recibe un golpe mas de lo normal!		  Velocidad de caminata mas lenta!		" .. bruiserlevel $) $desc
		' bruiserperk applyword
	
	"Coleccionista de armas" $perk
		($ "Sabias que acumular todas esas armas seria util! Eventualmente. Lo sabias!		" .. guncrazylevel $) $desc
		' guncrazyperk applyword
	
	"Atencion medica" $perk
		($ "Los idiotas son mordidos por zombis todo el tiempo. Es mejor estar preparado! 		" .. healthcarelevel $) $desc
		' healthcareperk applyword	
		
	"Car Nut" $perk
		($ "Ser un entusiasta de los autos es practicamente un superpoder ahora!		+ Comienza con un auto mejor		" .. carnutlevel $) $desc
		' carnutperk applyword
				
	"Megabuff" $perk
		($ "Posiblemente demasiado musculoso para controlar. Util para levantar y lanzar muebles pesados!		+ Comienza con un tubo de metal		" .. megabufflevel $) $desc
		' megabuffperk applyword
		
	"Ultrafit" $perk
		($ "Todo ese yoga realmente valio la pena!		+ Comienza con algunas barras de granola		" .. ultrafitlevel $) $desc 
		' ultrafitperk applyword
				
	"Amigo del perro" $perk
		($ "Esta persona ama a los perros y tiende a encontrarse con ellos!		+ Los perros enojados pueden volverse amigables		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Explorador" $perk
		($ "Algunas personas tienen un muy buen sentido de la direccion al conducir!		+ Obten una opcion de ubicacion extra durante los eventos de Saqueo constante!		" .. explorerlevel $) $desc
		' explorerperk applyword
		
	"Exluchador" $perk
		($ "Fue el mejor antes de un tragico accidente en el ring!		+ Levanta zombis caidos, luego tiralos o golpealos!		  Gran penalizacion a la habilidad maxima de disparo.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword
		
	"Potencial oculto" $perk
		($ "Parece modesto, pero puede superar a otros con entrenamiento!		+ Gana un punto en fuerza o estado fisico al azar. Entonces puede superar el maximo!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword
	
	"Vendedor estrella" $perk
		($ "La buena habilidad para las ventas todavia tiene su propio nicho!		+ Obtiene de 1 a 8 alimentos adicionales cuando se vende a un comprador de armas, segun el precio original.		+ Sin penalizacion de moral al pagar peajes de bandidos con comida!		" .. hagglerlevel $) $desc
		' hagglerperk applyword
	
	"Explorador" $perk
		($ "La experiencia de senderismo ayuda a evitar los terrores del bosque!		+ Elimina un evento de penalizacion del primer dia de caminata, cada vez que pierdes el auto!		" .. pathfinderlevel $) $desc
		' pathfinderperk applyword
	
	"Arma de Marca Registrada" $perk
		($ "Se destaca entre la multitud, con un arma exclusiva!		+ Comienza con un arma especial, dependiendo del rasgo!		  No puede soltar esta arma, ni siquiera en la muerte.		" .. trademarklevel $) $desc
		' trademarkperk applyword
		
	"Disparo natural" $perk
		($ "Un talento natural para disparar! Solo necesita mas entrenamiento y tal vez incluso un arma y municiones!		" .. naturalshotlevel $) $desc
		' naturalshotperk applyword
	
	"T*S*T*C" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword
		
	"Escudo de Esperanza" $perk
		($ "Sigue adelante con pura fuerza de voluntad!		+ Protege contra golpes fatales si la moral es superior a :" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword
		
	"Arco y flechas" $perk
		($ "El arco fue una pasatiempo util!		+ Comienza con un arco silencioso, 30 flechas, 2 puntos de fuerza!		  No se puede dejar este arco, ni siquiera en la muerte.		" .. archerlevel $) $desc
		' archerperk applyword
		
	"Piromaniaco" $perk
		($ "'Los zombis son extremadamente inflamables!		+ Comienza con un calentador de llama y proteccion contra el fuego!		  No se puede dejar este calentador de llama, ni siquiera en la muerte.		" .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"TEST" i .. $perk
		($ "El arco fue una pasatiempo util!		+ Comienza con un arco silencioso, 30 flechas, 2 puntos de fuerza!		  No se puede dejar este arco, ni siquiera en la muerte.		" .. archerlevel $) $desc
		' archerperk applyword
	next
*)
		
	// "Barbaro"
	// "Campeon de Grandes Golpes"
	// "Acechante"
			
	// Traits
	"Paranoico" $trait
		"Una combinacion alta de percepcion y un gran pessimismo permite a alguien prepararse para lo peor!		+ Puede identificar caracteristicas en nuevos reclutas		+ Siempre mirando por peligros		  Puede ser una verdadera grumpa" $desc
		' paranoidtrait applyword
	"Ignorante" $trait
		"Una buena actitud de vida combinada con no ser muy perceptivo permite realizar hechos magicos de negacion!		+ Puede ignorar el desespero		  Malos resultados para la percepcion y las habilidades mentales" $desc
		' oblivtrait applyword
	"Encantador" $trait
		"'Desde la percepcion de otros, una buena actitud y el carisma puro, hay algo sobre esta persona que abre puertas!		+ Encanta su camino a traves de cosas gratis o fuera de situaciones desagradables		  No se puede encantar para salir de todo" $desc
		' charmtrait applyword
	"Irritante" $trait
		"This person thinks they're soooooo cool. But they're not! They're just annoying!
		+ Tell people to 'Cool it'
		- Anger pretty much everybody" $desc
		' gratingtrait applyword
	"Bandido" $trait
		"Ser poco confiable puede ser una ventaja en el post apocalipsis.		+ Estafar a otros		  Estafar al grupo		  Bomba de tiempo" $desc
		' bandittrait applyword
	"Pasado misterioso" $trait
		"This person... has a mysterious past......
		+ 3 points given to fight skills at random
		- Randomized and extreme personality!" $desc
		' mysterytrait applyword
	"Practico" $trait
		"Tiene una variedad de habilidades utiles, pero es un poco aburrido.		+ 3 puntos dados a las habilidades de lucha al azar		+ 3 puntos dados a las habilidades de apoyo al azar		  Personalidad aburrida" $desc
		' practicaltrait applyword
	"Guerrero" $trait
		"Buen comienzo en las habilidades de golpear zombis, con una personalidad anodina.		+ 2 puntos mas de fuerza!		+ 2 puntos mas de condicion fisica!		  Personalidad aburrida" $desc
		' warriortrait applyword
	"Temperamento feroz" $trait
		"'Alguien tiene mal genio! La agresion puede resultar util.		+ 1 punto extra en fuerza		  Mal genio debido a baja compostura		+ El genio a veces puede ser bueno" $desc
		' fiercetrait applyword
	"Calma bajo fuego" $trait
		"Tranquilo y sereno. Util cuando se dispara a una horda!		+ Muy tranquilo debido a la alta compostura		+ 1 punto extra en tiro" $desc
		' calmtrait applyword
	"Nutritivo" $trait
		"Espanol" $desc
		' nurturetrait applyword
	"Inventivo" $trait
		"Comodo con maquinaria, como autos.		+ 2 puntos mas mecanicos!  Grandes controles de ingenio!		+ Puede ir uno sobre el maximo de habilidad mecanica!		  Puede que necesites mas practica para reparar el auto" $desc
		' inventtrait applyword
	"Lloron frenetico" $trait
		"Un tipo fragil. Pero muy bueno huyendo!		+ Bono de velocidad de carrera!		  Recibe un golpe menos de lo normal		  Mala actitud" $desc
		' frantictrait applyword
	"Tipo resistente" $trait
		"Muy duro! El musculo! No es un planificador a largo plazo.		+ Recibe un golpe mas de lo normal		  Malas tiradas de ingenio" $desc
		' toughtrait applyword
	"LOCO!" $trait
		"Destroy all zombies! Never retreat! Oh no, I got bit!
		+ 4 points to strength, fitness, and shooting!!
		+ Can go one over the maximum for the above stats!!!
		- Super low personality stats! Dies in one bite!!" $desc
		' berserktrait applyword
	"Civilizado" $trait
		"Conserva los valores antiguos antes de que el mundo se volviera loco. Esto es bueno y malo.		+ Estadisticas de lealtad y personalidad super altas!		+ 1 punto para habilidades medicas y mecanicas!		  Penalizacion de moral permanente y significativa!!" $desc
		' civiltrait applyword
	"Durmiente profundo" $trait
		($ "Duerme en cualquier momento y en cualquier lugar. El mejor durmiendo!		+ Sueno sobrehumano! Necesita muy poco sueno.		+ Nunca obtiene el estado CANSADO, nunca." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"Gourmand" $trait
		($ "'Realmente aprecia la comida enlatada vieja!		+ Comer una comida completa restaura 1 punto de moral de este personaje, hasta el maximo! Obtiene un punto extra de salud maxima!		  Come un poco mas, 3 comidas en lugar de 2. Quedarse sin comida disminuye la moral mas rapido!" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Buscador de ciudades" $trait
		($ "Bendecido con una vida interesante!		+ Muchas mas posibilidades de encontrar un edificio o personaje extrano en eventos de saqueo de la ciudad! Probabilidad normal: 10% Con rasgo: 50%		+ Duplica las posibilidades de encontrar campamentos de comerciantes raros!" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Viaja Ligero" $trait
		($ "Points" .. travellight-lock $) $desc
		' travellighttrait applyword
	"Tipo de heroe" $trait
		($ "'Siempre sere tu guardaespaldas. Bueno, una vez.		+ Salva a un companero de equipo de la muerte en un evento de texto!		 Solo hace esto una vez por juego!		+ Comienza con la maxima lealtad!" .. herotype-lock $) $desc
		' herotypetrait applyword
	"Pequeno comedor" $trait
		($ "1 point" .. tinyeat-lock $) $desc
		' tinyeattrait applyword	
	"Fanatico del anime" $trait
		($ "..		  Initial release." .. animefan-lock $) $desc
		' animefantrait applyword	
	"Especialista" $trait
		($ "Points" .. specialist-lock $) $desc
		' spectrait applyword
	"Luchador" $trait
		($ "X score" .. grappler-lock $) $desc
		' grapplertrait applyword
	"Fenix" $trait
		($ "El Fenix surge de las cenizas! *agita los brazos como si fueran alas*		+ Resucita a si mismo al morir, con toda su salud!		+ Inflamable! Parate en las llamas!		  Pierde todo el rasgo despues de la primera muerte!" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"Dingus Savant" $trait
		($ "Siempre destinado a grandes cosas! Nunca me moleste en trabajar por ello.		+ Obtiene un bono de 1 punto al maximo para todas las habilidades!		  Recibe 1 golpe menos de lo normal!		  Penalizacion de 2 puntos al maximo de moral!" .. savant-lock $) $desc
		' savanttrait applyword
	"Aprendiz Rapido" $trait
		($ "Comienza bajo, pero aprende nuevas habilidades rapido!		+ Obtiene el doble de habilidad de tiro, mecanica y medica!		  Cada bonificacion de crecimiento se detiene despues de que su habilidad llega a 4 puntos" .. fastlearn-lock $) $desc
		' fastlearntrait applyword
	
		
	// "Durmiente profundo"
	// "Gourmand"
	// "Buscador de ciudades"
	// "Viaja Ligero"
	
	// "Pequeno comedor"
	// "Fanatico del anime"
	// "Especialista"
	// "Luchador"
	// "Fenix"
	// ""
	// ""
	// ""
;

defperks

}
