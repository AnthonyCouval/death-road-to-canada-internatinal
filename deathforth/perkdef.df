perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "Arma del marchio" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"PARANOICO APPLICATO SU CHAR " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"OBLIVIOSO APPLICATO SU CHAR " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"BANDITO APPLICATO SU CHAR " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"AFFASCINANTE APPLICATO SU CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"GRATTUGIA APPLICATA SU CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "Arma del marchio" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"TEMPERA FIERA APPLICATA SU CHAR " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"CALMA SOTTO FUOCO APPLICATA SU CHAR " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"NUTRIZIONE APPLICATA SU CHAR " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if 
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"INVENTORE APPLICATO SU CHAR " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "Arma del marchio" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"PIAGNINO FRENETICO APPLICATO SU CHAR " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+ 
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"TIPO RESILIENTE APPLICATO SU CHAR " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"BERSERK! APPLICATO SU CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"CIVILE! APPLICATO SU CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"MISTERIOSO APPLICATO SU CHAR " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "Artista marziale" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"PRATICO APPLICATO SU CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+	
;

: warriortrait args( chara )
	"GUERRIERO APPLICATO SU CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"SPECIALISTA APPLICATO SU CHAR " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "Frecce e Arco" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "Collezionista di Armi da Fuoco" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "Piromane" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"TRAVELLIGHT APPLICATO SU CHAR " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+ 
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "Collezionista di Armi da Fuoco" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"GRAPPADORO APPLIED ON CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	
	<- chara .perk@ "Ex Lottatore" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then
	
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	"TIPOTYPE APPLIED ON CHAR " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"SONDOSONNO APPLIED ON CHAR " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"Gourmet APPLIED ON CHAR " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"CITTAVISITA APPLIED ON CHAR " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"Mangiabimbi APPLIED ON CHAR " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"Fan di Anime APPLIED ON CHAR " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"PHOENIX APPLICATO SU CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"SAVANT APPLICATO SU CHAR " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"X " type <- chara .name@ print
;
	
// Perks

: healthcareperk args( chara )
	"CURA APPLICATA SU CHAR " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;
	
: mechanicperk args( chara )
	"MECCANICO APPLICATO SU CHAR " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then	
	then WEAPON_WRENCH <- chara .weapona!
	
;

: athleteperk args( chara )
	"X " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then	
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"X " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"CHIRURGO APPLICATO SU CHAR " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"GUNGINEER APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"PISTOLA APPLICATA A CHAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"FUCILE APPLICATO A CHAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!	
;

: rifleperk args( chara )
	"FUCILE APPLICATO A CHAR " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!	
;

: guncrazyperk args( chara )
	"GUNCRAZY APPLICATO A CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "Car Nut" $= ;

: carnutperk args( chara )
	"CAR NUT APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then	
	then crap-weapon <- chara .weapona!
// Commented out to fix the "familiar faces da auto contro la volonta" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"MEGABUFF APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+	
		else
			2 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"ULTRAFIT APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then	
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"BRUISER APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+	
		else
			1 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_BOXING <- chara .weapon_default! 
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"MARTIAL ARTIST APPLICATO A CHAR " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then	
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"FRIEND OF DOG APPLICATO A CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"EXPLORER APPLICATO A CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	"Ex wrestler applicato su char " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then 
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV 
;

: hiddenpotentialperk args( chara )
	"X " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"HAGGLER APPLICATO SU CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"PATHFINDER APPLICATO SU CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"TRADEMARK APPLICATO SU CHAR " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM 
		then	
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"NATURALSHOT APPLICATO SU CHAR " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+ 
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+ 
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+ 
		then 
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"T*S*T*C APPLICATO SU CHAR " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+ 
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+ 
		else
			-6 STAT_FITNESS <- chara .bonus+ 
		then 
	then 6 STAT_FITNESS <- chara .stat+ 
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"SHIELDOFHOPE APPLICATO SU CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Specialista" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Specialista" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"BOW AND ARROW APPLICATO SU CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Specialista" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Specialista" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Specialista" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"PYROMANIAC CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. "LIVELLO SUCCESSIVO: " ;
: LOCKED cr$ .. cr$ .. RED .. 
	game.location 0 > if "BLOCCATO! " else "BLOCCATO: Sblocca al Rifugio Vantaggi e Caratteristiche a Zombo Town" then
	
;
// Formerly : cr$ .. "LIVELLO SUCCESSIVO: " rbold

: mechaniclevel 
	gstats{ perk-mechanic } 3 >= if
		($ "+ Guadagna 2 punti in meccanica!		+ Guadagna 2 punti in forma!" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "+ Guadagna 2 punti in meccanica!		+ Guadagna 1 punto in forma" .. NEXT_LEVEL .. "2 punti in fitness!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in meccanica		+ Guadagni 1 punto in fitness" .. 
		gstats{ perk-mechanic } 1 < if 
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "2 punti in meccanica!"
		then $)
;

: athletelevel 
	gstats{ perk-athlete } 3 >= if
		($ "+ Guadagni 2 punti in fitness!		+ Guadagni 2 punti in forza!" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "+ Guadagni 2 punti in fitness!		+ Guadagni 1 punto in forza" .. NEXT_LEVEL .. "2 punti in forza!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in fitness		+ Guadagni 1 punto in forza" .. NEXT_LEVEL .. "2 punti in fitness!" $)
;

: fighterlevel 
	gstats{ perk-fighter } 3 >= if
		($ "+ Guadagni 2 punti in forza!		+ Guadagni 2 punti in tiro!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "+ Guadagni 2 punti in forza!		+ Guadagni 1 punto in tiro" .. NEXT_LEVEL .. "2 punti in tiro!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in forza		+ Guadagni 1 punto in tiro" .. NEXT_LEVEL .. "2 punti in forza!" $)
;

: surgeonlevel 
	gstats{ perk-surgeon } 3 >= if
		($ "+ Guadagni 2 punti in medicina!		+ Guadagni 2 punti in tiro!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "+ Guadagni 2 punti in medicina!		+ Guadagni 1 punto in tiro" .. NEXT_LEVEL .. "2 punti in tiro!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in medicina		+ Guadagni 1 punto in tiro" .. NEXT_LEVEL .. "2 punti in medicina!" $)
;

: gungineerlevel 
	gstats{ perk-gungineer } 3 >= if
		($ "+ Guadagni 2 punti in tiro!		+ Guadagni 2 punti in meccanica!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "+ Guadagni 2 punti in tiro!		+ Guadagni 1 punto in meccanica" .. NEXT_LEVEL .. "2 punti in meccanica!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in tiro		+ Guadagni 1 punto in meccanica" .. NEXT_LEVEL .. "2 punti in tiro!" $)
;

: healthcarelevel 
	gstats{ perk-healthcare } 3 >= if
		($ "+ Parti con 7 kit medici!		+ Guadagni 2 punti in medicina!" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "+ Parti con 5 kit medici		+ Guadagni 2 punti in medicina!" .. NEXT_LEVEL .. "7 kit medici!" $) 1 lvl
	then;
		($ "+ Parti con 4 kit medici		+ Guadagni 1 punto in medicina" .. NEXT_LEVEL .. "5 kit medici, 2 in medicina!" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "+ Guadagni 3 punti in tiro!" $) 2 lvl ;
: shotgunlevel ($ "+ Guadagni 3 punti in tiro!" $) 2 lvl ;
: riflelevel ($ "+ Guadagni 3 punti in tiro!" $) 2 lvl ;

: guncrazylevel 
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "3 in tiro, e un fucile!" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "2 in tiro, e un fucile!" $)
;

: carnutlevel 
	gstats{ perk-carnut } 3 >= if
		($ "+ Guadagni 3 punti in meccanica!" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "+ Guadagni 2 punti in meccanica" .. NEXT_LEVEL .. "3 punti in meccanica!" $) 1 lvl
	then;
		($ "+ Guadagni 1 punto in meccanica" .. NEXT_LEVEL .. "2 punti in meccanica" $)
;

: megabufflevel 
	gstats{ perk-megabuff } 3 >= if
		($ "+ Guadagni 4 punti in forza!" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "+ Guadagni 3 punti in forza" .. NEXT_LEVEL .. "4 punti in forza!" $) 1 lvl
	then;
		($ "+ Guadagni 2 punti in forza" .. NEXT_LEVEL .. "3 punti in forza" $)
;

: ultrafitlevel 
	gstats{ perk-ultrafit } 3 >= if
		($ "+ Guadagni 4 punti in forma!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "+ Guadagni 3 punti in forma" .. NEXT_LEVEL .. "4 punti in forma!" $) 1 lvl
	then;
		($ "+ Guadagni 2 punti in forma" .. NEXT_LEVEL .. "3 punti in forma" $)
;

: martialartistlevel 
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "+ Guadagna 2 punti in fitness, 1 in forza" .. NEXT_LEVEL .. "3 fitness, ora puoi andare 1 oltre il massimo!" $) 1 lvl
	then;
		($ "+ Guadagna 1 punto in fitness, 1 in forza" .. NEXT_LEVEL .. "2 punti in fitness" $)
;

: bruiserlevel 
	gstats{ perk-bruiser } 3 >= if
		($ "+ Guadagna 3 punti in forza!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "+ Guadagni 2 punti in forza" .. NEXT_LEVEL .. "3 in forza!" $) 1 lvl
	then;
		($ "+ Guadagna 1 punto in forza" .. NEXT_LEVEL .. "2 punti in forza" $)
;

: doglevel 
	gstats{ perk-dogfriend } 3 >= if
		($ "+ 70% di possibilita in piu che una recluta casuale sia un cane" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "+ 35% di possibilita in piu che una recluta casuale sia un cane" .. NEXT_LEVEL .. "70% di possibilita!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "35% di possibilita che le reclute siano un cane" $)
;

: explorerlevel 
	gstats{ perk-explorer } 3 >= if
		($ "+ Il rerolling ABL costa molto meno gas!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "+ Il rerolling ABL costa meno gas" .. NEXT_LEVEL .. "Molto meno gas per i reroll di ABL!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "More gas for other things" $)
;

: exwrestlerlevel 
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Guadagna 2 punti in fitness!		+ Guadagna 1 punto in forza!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+ Guadagno 1 punto in fitness		+ Guadagno 1 punto in forza!" .. NEXT_LEVEL .. "2 punti in fitness!" $) 1 lvl
	then;
		($ "+ Guadagno 1 punto in fitness" .. 
		gstats{ perk-exwrestler } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 punto in forza!"
		then $)
;

: hiddenpotentiallevel 
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+ Guadagno 1 punto nellabilita non scelta		+ Guadagno 1 punto finale in forza o fitness, a caso!" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "+ Guadagno 1 punto nellaltra abilita" .. NEXT_LEVEL .. "Punto casuale in fitness o forza!" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "1 punto nellaltra abilita" $)
		then
;

: hagglerlevel 
	gstats{ perk-haggler } 3 >= if
		($ "+ I pedaggi dei banditi sono minori!" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "+ I pedaggi dei banditi sono minori" .. NEXT_LEVEL .. "Pedaggi ancora piu bassi!" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "I pedaggi dei banditi sono minori" $)
		then
;

: pathfinderlevel 
	gstats{ perk-pathfinder } 3 >= if
		($ "+ 75% di possibilita di saltare le penalita per il 2 giorno di cammino!" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "+ 60% di possibilita di saltare la penalita per il 2 giorno di cammino" .. NEXT_LEVEL .. "75% di possibilita!" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "60% chance to skip penalty for 2nd walking day" $)
		then
;

: trademarklevel 
	gstats{ perk-trademark } 3 >= if
		($ "+ Larma predefinita e un robusto machete!!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "+ Arma predefinita: 50% mazza di alluminio, 50% machete" .. NEXT_LEVEL .. "100% di probabilita di avere un robusto machete!" $) 1 lvl
	then;
		($ "+ Larma predefinita e una mazza di alluminio!" ..
		gstats{ perk-trademark } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "50% di probabilita di avere un robusto machete!" $)
		then $)
;

: naturalshotlevel 
	gstats{ perk-naturalshot } 3 >= if
		($ "+ Ottieni 2 punti in tiro!		+ Il tiro puo superare il massimo solito di 2 punti!" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "+ Ottieni 2 punti in tiro!		+ Il tiro puo superare il massimo solito di 1 punto" .. NEXT_LEVEL .. "2 oltre il massimo!" $) 1 lvl
	then;
		($ "+ Ottieni 1 punto in tiro		+ Il tiro puo superare il massimo solito di 1 punto" .. 
		gstats{ perk-naturalshot } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 punti in tiro!"
		then $)
;

: tstclevel 
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ "La forma fisica parte da 2!" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ "La forma fisica parte da 1" .. NEXT_LEVEL .. "La forma fisica sale a 2!" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "La forma fisica sale a 1" $)
		then
;

: shieldofhopelevel 
	gstats{ perk-shieldofhope } 3 >= if
		($ "  perdi 2 punti morale ogni volta che eviti la morte!" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "  perdete 3 morale ogni volta che evitate la morte" .. NEXT_LEVEL .. "Solamente 2 morale!" $) 1 lvl
	then;
		($ "  perdete 4 morale ogni volta che evitate la morte" ..
		gstats{ perk-shieldofhope } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "perdete 3 morale"
		then $)
;

: archerlevel
		($ "+ Ricaricate frecce per il tuo arco tra le missioni, " $) ..
	gstats{ perk-archer } 3 >= if
		($ "fino a 10!" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "fino a 7" .. NEXT_LEVEL .. "Creiamo 10 frecce!" $) 1 lvl
	then;
		($ "fino a 4" ..
		gstats{ perk-archer } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Creiamo 7 armi"
		then $)
;

: pyrolevel
		($ "+ Ricaricate la tua torcia a fuoco tra le missioni, " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "fino a 8 cariche!" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "fino a 6 cariche" .. NEXT_LEVEL .. "Trova 8 cariche!" $) 1 lvl
	then;
		($ "fino a 4 cariche" ..
		gstats{ perk-pyro } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Trova 6 cariche"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"Meccanico" $perk
		($ "La macchina e vita! Nota: Non necessariamente un meccanico COMPETENTE.		+ Inizia con una chiave		" .. mechaniclevel $) $desc
		' mechanicperk applyword
		
	"Atleta" $perk
		($ "Un passato atletico si traduce bene nella sopravvivenza agli zombi.		+ Inizia con unarma sportiva casuale		" .. athletelevel $) $desc
		' athleteperk applyword
		
	"Combattente" $perk
		($ "Questa persona e sempre stata un vero combattente.		+ Inizia con unascia		" .. fighterlevel $) $desc
		' fighterperk applyword
		
	"Chirurgo" $perk
		($ "Ha una buona intuizione dellanatomia e una mano davvero ferma.		+ Inizia con un bisturi		" .. surgeonlevel $) $desc
		' surgeonperk applyword
		
	"Gungineere" $perk
		($ "Italiano" .. gungineerlevel $) $desc
		' gungineerperk applyword
		
(*	"Pistolero" $perk
		($ "Le pistole sparano in fretta e le munizioni sono abbondanti!		+ Inizia con una pistola e 30 proiettili		" .. pistollevel $) $desc
		' pistolperk applyword
		
	"Tiratore con fucile" $perk
		($ "Un colpo di fucile puo trafiggere una fila di zombi, nelle mani giuste!		+ Inizia con un fucile e 24 munizioni		" .. riflelevel $) $desc
		' rifleperk applyword
		
	"Fuciliere" $perk
		($ "Tutti sanno che i fucili sono la vera arma anti zombi!		+ Inizia con un fucile e 15 proiettili		" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"Artista marziale" $perk
		($ "Nessuna arma? Nessun problema!		+ Inizia con un potente attacco disarmato a due colpi!!		  Si rifiuta di usare armi da fuoco, motoseghe e alcune altre!!		" .. martialartistlevel $) $desc
		' martialartistperk applyword		
		
	"Grande Bruiser" $perk
		($ "Si muove lentamente, colpisce molto duramente, prende un colpo!		+ Inizia con un attacco disarmato migliore! Prendi un colpo in piu del normale!		  Velocita di camminata piu lenta!		" .. bruiserlevel $) $desc
		' bruiserperk applyword
	
	"Collezionista di Armi da Fuoco" $perk
		($ "Sapevi che accumulare tutte quelle pistole sarebbe stato utile! Alla fine. Lo sapevi!		" .. guncrazylevel $) $desc
		' guncrazyperk applyword
	
	"Assistenza sanitaria" $perk
		($ "Gli idioti vengono morsi dagli zombi tutto il tempo. Meglio essere preparati! 		" .. healthcarelevel $) $desc
		' healthcareperk applyword	
		
	"Car Nut" $perk
		($ "Essere un appassionato di auto e praticamente un superpotere ora!		+ Inizia con unauto migliore		" .. carnutlevel $) $desc
		' carnutperk applyword
				
	"Megabuff" $perk
		($ "Probabilmente troppo grosso per controllarsi. Utile per raccogliere e lanciare mobili pesanti!		+ Inizia con un tubo di metallo		" .. megabufflevel $) $desc
		' megabuffperk applyword
		
	"Ultra in forma" $perk
		($ "Tutto quello yoga ha davvero dato i suoi frutti!		+ Inizia con alcune barrette di granola		" .. ultrafitlevel $) $desc 
		' ultrafitperk applyword
				
	"Amico del cane" $perk
		($ "Questa persona ama i cani e tende a imbattersi in loro!		+ I cani arrabbiati possono diventare amichevoli		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Esploratore" $perk
		($ "Alcune persone hanno un ottimo senso dellorientamento quando guidano!		+ Ottieni una scelta di posizione extra durante gli eventi Always Be Looting!		" .. explorerlevel $) $desc
		' explorerperk applyword
		
	"Ex Lottatore" $perk
		($ "Era il migliore prima di un tragico incidente sul ring!		+ Raccogli gli zombi abbattuti, quindi lanciali o schiantali!		  Grande penalita alla massima abilita di tiro.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword
		
	"Potenziale nascosto" $perk
		($ "Sembra modesto, ma puo superare gli altri con lallenamento!		+ Ottieni un punto in forza o forma fisica a caso. Puo quindi superare di 1 il massimo!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword
	
	"Miglior venditore" $perk
		($ "La buona capacita di vendita ha ancora la sua nicchia!		+ Ottiene 1 8 cibo in piu quando vende a un acquirente di armi, a seconda del prezzo originale.		+ Nessuna penalita morale quando si pagano i pedaggi dei banditi con il cibo!		" .. hagglerlevel $) $desc
		' hagglerperk applyword
	
	"Esploratore" $perk
		($ "Lesperienza escursionistica aiuta a evitare i terrori della foresta!		+ Rimuove un evento di penalita dal primo giorno di cammino, ogni volta che perdi lauto!		" .. pathfinderlevel $) $desc
		' pathfinderperk applyword
	
	"Arma del marchio" $perk
		($ "Si distingue dalla folla, con unarma caratteristica!		+ Inizia con unarma speciale, a seconda del tratto!		  Non puo abbandonare questarma, nemmeno in caso di morte.		" .. trademarklevel $) $desc
		' trademarkperk applyword
		
	"Tiro naturale" $perk
		($ "Un talento naturale nel tiro! Ha solo bisogno di piu addestramento e magari anche di una pistola e munizioni!		" .. naturalshotlevel $) $desc
		' naturalshotperk applyword
	
	"T*S*T*C" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword
		
	"Scudo della Speranza" $perk
		($ "Continua ad andare avanti grazie alla pura forza di volonta!		+ Protegge dai colpi fatali se il morale e alto :" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword
		
	"Frecce e Arco" $perk
		($ "Il tiro con larco alla fine si e rivelato un hobby utile!		+ Inizia con un arco silenzioso, 30 frecce, 2 punti in forza!		  Non puo abbandonare questo arco, nemmeno in caso di morte.		" .. archerlevel $) $desc
		' archerperk applyword
		
	"Piromane" $perk
		($ "'Gli zombi sono estremamente infiammabili!		+ Inizia con un cannello e una protezione contro il fuoco!		  Non puo abbandonare questo cannello, nemmeno in caso di morte.		" .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"TEST" i .. $perk
		($ "Il tiro con larco alla fine si e rivelato un hobby utile!		+ Inizia con un arco silenzioso, 30 frecce, 2 punti in forza!		  Non puo abbandonare questo arco, nemmeno in caso di morte.		" .. archerlevel $) $desc
		' archerperk applyword
	next
*)
		
	// "Barbaro"
	// "Campione di Home Run"
	// "Feroce"
			
	// Traits
	"Paranoico" $trait
		"Una combinazione di alta percezione e pessimismo estremo consente a qualcuno di prepararsi al peggio!		+ Puo identificare i tratti nelle nuove reclute		+ Sempre alla ricerca del pericolo		  Puo essere un vero brontolone" $desc
		' paranoidtrait applyword
	"Oblivio" $trait
		"Una grande visione della vita combinata con il non essere molto perspicace consente alcune magiche imprese di negazione!		+ Puo ignorare la disperazione		  Tiri bassi per percezione e arguzia" $desc
		' oblivtrait applyword
	"Affascinante" $trait
		"'Dalla percezione degli altri, un buon atteggiamento e puro carisma, c'e qualcosa in questa persona che apre le porte! + Si fa strada con cose gratuite o fuori da brutte situazioni   Non puo uscire da tutto con il fascino" $desc
		' charmtrait applyword
	"Irritante" $trait
		"This person thinks they're soooooo cool. But they're not! They're just annoying!
		+ Tell people to 'Cool it'
		- Anger pretty much everybody" $desc
		' gratingtrait applyword
	"Bandito" $trait
		"Essere inaffidabili puo essere un vantaggio nel post apocalisse. + Strappare gli altri   Strappare il gruppo   Bomba a orologeria" $desc
		' bandittrait applyword
	"Passato misterioso" $trait
		"This person... has a mysterious past......
		+ 3 points given to fight skills at random
		- Randomized and extreme personality!" $desc
		' mysterytrait applyword
	"Pratico" $trait
		"Ha una varieta di abilita utili, ma e un po noioso. + 3 punti dati alle abilita di combattimento a caso + 3 punti dati alle abilita di supporto a caso   Personalita noiosa" $desc
		' practicaltrait applyword
	"Guerriero" $trait
		"Buon inizio sulle abilita di zombi, con una personalita anonima. + 2 punti in piu di forza! + 2 punti in piu di forma fisica!   Personalita noiosa" $desc
		' warriortrait applyword
	"Temperamento feroce" $trait
		"'Qualcuno ha un brutto carattere! L'aggressivita puo tornare utile. + 1 punto extra in forza   Brutto carattere dovuto alla bassa compostezza + Il temperamento a volte puo essere buono" $desc
		' fiercetrait applyword
	"Calma sotto il fuoco" $trait
		"Calmo e composto. Utile quando si spara in unorda! + Molto calmo grazie allalta compostezza + 1 punto extra nel tiro" $desc
		' calmtrait applyword
	"Nutriente" $trait
		"Sempre attento agli altri! Per ora ancora non e cibo per zombie.		+ 2 punti in piu in medicina! Ottimo atteggiamento		+ Puo superare di uno il livello massimo in medicina!!		  Puo essere una recita" $desc
		' nurturetrait applyword
	"Inventato" $trait
		"A suo agio con la meccanica, come le macchine.		+ 2 punti in piu in meccanica! Ottimi controlli di arguzia!		+ Puo superare di uno il livello massimo in meccanica!!		  Potrebbe aver bisogno di piu pratica per riparare le macchine" $desc
		' inventtrait applyword
	"Piagnone frenetico" $trait
		"Un tipo piuttosto fragile. Ma davvero bravo a scappare!		+ Bonus velocita corsa!		  Prende un colpo in meno del normale		  Brutto atteggiamento" $desc
		' frantictrait applyword
	"Tipo resiliente" $trait
		"Davvero duro! Il muscolo! Non un pianificatore a lungo termine.		+ Prende un colpo in piu del normale		  Brutti tiri di arguzia" $desc
		' toughtrait applyword
	"BERSERK!" $trait
		"Destroy all zombies! Never retreat! Oh no, I got bit!
		+ 4 points to strength, fitness, and shooting!!
		+ Can go one over the maximum for the above stats!!!
		- Super low personality stats! Dies in one bite!!" $desc
		' berserktrait applyword
	"Civilizzato" $trait
		"Mantiene i vecchi valori di prima che il mondo impazzisse. Questo e un bene e un male.		+ Statistiche di lealta e personalita altissime!		+ 1 punto in abilita mediche e meccaniche!!		  Penalita morale permanente e significativa!!" $desc
		' civiltrait applyword
	"Dormiglione" $trait
		($ "Dormo sempre e ovunque. Il numero 1 nel dormire!		+ Sonno sovrumano! Ha bisogno di pochissimo sonno.		+ Non ottiene mai lo stato STANCO, mai." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"Gourmand" $trait
		($ "'Apprezza davvero il cibo vecchio in scatola!		+ Mangiare un pasto completo ripristina 1 punto di morale di questo personaggio, fino a pieno! Ottiene un punto extra di salute massima!		  Mangia un po' di piu, 3 cibi invece di 2. La mancanza di cibo fa diminuire il morale piu velocemente!" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Cercatore di citta" $trait
		($ "Benedetto con una vita interessante!		+ Molte piu possibilita di trovare uno strano edificio o personaggio durante gli eventi di saccheggio in citta! Probabilita normale: 10% Con tratto: 50%		+ Raddoppia la possibilita di trovare rari campi di scambio!" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Viaggia leggero" $trait
		($ "Porta meno cose cosi puoi correre un po piu velocemente!		+ Bonus alla velocita di corsa!		+ 1 punto in piu in forma!		  Puo portare solo due armi alla volta!" .. travellight-lock $) $desc
		' travellighttrait applyword
	"Tipo Eroe" $trait
		($ "'Saro sempre la tua guardia del corpo. Beh, una volta.		+ Salva un compagno di squadra dalla morte in un evento di testo!		  Lo fa solo una volta per partita!		+ Inizia con la massima lealta!" .. herotype-lock $) $desc
		' herotypetrait applyword
	"Mangiafagioli" $trait
		($ "Mangia molto meno del normale! Fa piccoli bocconi!		+ Un pasto completo richiede solo 1 cibo!!		  Ottiene una penalita di 2 punti alla forza massima!		  Ottiene una penalita di 1 punto alla forma massima." .. tinyeat-lock $) $desc
		' tinyeattrait applyword	
	"Fan degli anime" $trait
		($ "'E proprio come nei miei anime sugli zombi!		+ L'arma viene sostituita con una potente Katana forte.		  La Katana non puo essere abbandonata, nemmeno alla morte.		  ATTENZIONE: evita di ottenere il morale pieno! ATTENZIONE ANIME!" .. animefan-lock $) $desc
		' animefantrait applyword	
	"Specialista" $trait
		($ "Un po troppo fissato su un metodo di splatting zombi.		+ 2 punti a forza, forma e tiro		+ Puo superare il massimo per le statistiche sopra!!		  Puo portare solo UNA ARMA alla volta!!" .. specialist-lock $) $desc
		' spectrait applyword
	"Grappler" $trait
		($ "Se uno zombi cade, puoi raccoglierlo!		+ Lancia o sbatti gli zombi trasportati!		  Personalita noiosa" .. grappler-lock $) $desc
		' grapplertrait applyword
	"Fenice" $trait
		($ "La Fenice risorge dalle ceneri! *sbatte le braccia come se fossero ali*		+ Resuscita se stesso alla morte, in piena salute!!		+ Infiammabile! Resta tra le fiamme!		  Perde lintero tratto dopo la prima morte!" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"Dingus Savant" $trait
		($ "Destinato sempre a grandi cose! Non si e mai preoccupato di lavorare per questo.		+ Ottiene un bonus di 1 punto al massimo per tutte le abilita!		  Subisce 1 colpo in meno del normale!		  Penalita di 2 punti al morale massimo!" .. savant-lock $) $desc
		' savanttrait applyword
	"Apprendimento Rapido" $trait
		($ "Inizia basso, ma impara nuove abilita rapidamente!		+ Ottiene il doppio della quantita di abilita di tiro, meccanica e medica!		  Ogni bonus di crescita si interrompe dopo che la sua abilita raggiunge i 4 punti" .. fastlearn-lock $) $desc
		' fastlearntrait applyword
	
		
	// "Dormiglione"
	// "Gourmand"
	// "Cercatore di citta"
	// "Viaggia leggero"
	
	// "Mangiafagioli"
	// "Fan degli anime"
	// "Specialista"
	// "Grappler"
	// "Fenice"
	// ""
	// ""
	// ""
;

defperks

}
