perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "'Handelsmarke Waffe" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"'PARANOID ANGEWendet AUF CHAR " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"'OHNMACHTIG ANGEWendet AUF CHAR " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"'BANDIT ANGEWendet AUF CHAR " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"'CHARMANT ANGEWendet AUF CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"'REIBEND ANGEWendet AUF CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "'Handelsmarke Waffe" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"'FURCHTBAR GESTahlt ANGEWendet AUF CHAR " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"'RUHIG UNTER FEUER ANGEWendet AUF CHAR " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"'PFLEGEND ANGEWendet AUF CHAR " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if 
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"'ERfinderisch ANGEWendet AUF CHAR " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "'Handelsmarke Waffe" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"'HEKTISCH JAMMERND ANGEWendet AUF CHAR " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+ 
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"'WIDERSTANDSFAHIGE Art ANGEWendet AUF CHAR " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"'BERSERK! Angewendet auf CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"'Zivilisiert! Angewendet auf CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"'Geheimnisvolles! Angewendet auf CHAR " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "'Kampfkunstler" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"'Praktisch! Angewendet auf CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+	
;

: warriortrait args( chara )
	"'Krieger! Angewendet auf CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"'Spezialist! Angewendet auf CHAR " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "'Bogen und Pfeile" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "'Pfeilschutze" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "'Pyromane" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"'REISELEICHT! Angewendet auf CHAR " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+ 
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "'Pfeilschutze" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"'Ringer! Angewendet auf CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	
	<- chara .perk@ "'Ex-Ringer" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then
	
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	" 1 " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"'TONSOFTSCHALLANWENDUNG AN DER CHAR " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"'FEINESSESSEN APPLIED ON CHAR " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"'STADTSUCHTER APPLIED ON CHAR " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"'KLEINSTEISSE APPLIED ON CHAR " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"'ANIMEFANAT APPLIED ON CHAR " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"'PHOENIX APPLIED ON CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"'GEISTREICH APPLIED ON CHAR " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"'Schneller Lernender APPLIED ON CHAR " type <- chara .name@ print
;
	
// Perks

: healthcareperk args( chara )
	"'GESUNDHEITSPFLEGER APPLIED ON CHAR " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;
	
: mechanicperk args( chara )
	"'MECHANiker wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then	
	then WEAPON_WRENCH <- chara .weapona!
	
;

: athleteperk args( chara )
	"0x00000000 " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then	
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"1 " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"'CHIRURG wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"'Waffenschmied wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"'PISTOLE wendet auf Charakter an " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"'Schrotflinte wendet auf Charakter an " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!	
;

: rifleperk args( chara )
	"'GEWEHR wendet auf Charakter an " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!	
;

: guncrazyperk args( chara )
	"'Waffenfanatiker wendet auf Charakter an " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "'Autonarr" $= ;

: carnutperk args( chara )
	"'AUTONARR wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then	
	then crap-weapon <- chara .weapona!
// Commented out to fix the "'bekannte Gesichter geben widerstrebend Auto" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"'SUPERBUFF wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+	
		else
			2 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"'ULTRAFIT wendet auf Charakter an " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then	
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"1 " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+	
		else
			1 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_BOXING <- chara .weapon_default! 
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"0x00000000 " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then	
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"0x00000000 " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"0x00000000 " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	" Ex-Wrestler hat sich auf Charakter beworben " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then 
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV 
;

: hiddenpotentialperk args( chara )
	"Versteckt: Angewendet auf Charakter', " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"Haggling: Angewendet auf Charakter', " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"Navigator: Angewendet auf Charakter', " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"Markierung: Angewendet auf Charakter', " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM 
		then	
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"Naturlicher Schuss: Angewendet auf Charakter', " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+ 
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+ 
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+ 
		then 
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"T*S*T*C: Angewendet auf Charakter', " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+ 
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+ 
		else
			-6 STAT_FITNESS <- chara .bonus+ 
		then 
	then 6 STAT_FITNESS <- chara .stat+ 
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"Schild der Hoffnung: Angewendet auf Charakter', " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Fachmann" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Fachmann" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"Bogen und Pfeil: Angewendet auf Charakter', " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Fachmann" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Fachmann" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Fachmann" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"Pyromane: Charakter', " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. "Nachstes Level: ', " ;
: LOCKED cr$ .. cr$ .. RED .. 
	game.location 0 > if "Sperrung! " else "'GESchLOCKT: Schließung in Zombo Stadt Hut freischalten" then
	
;
// Formerly : cr$ .. "Nachstes Level: ', " rbold

: mechaniclevel 
	gstats{ perk-mechanic } 3 >= if
		($ "'+ 2 Punkte in mechanisch gewinnen		+ 2 Punkte in Fitness gewinnen!" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "'+ 2 Punkte in mechanisch gewinnen		+ 1 Punkt in Fitness gewinnen" .. NEXT_LEVEL .. "'2 Punkte in Fitness gewinnen!" $) 1 lvl
	then;
		($ "'+ 1 Punkt in mechanisch gewinnen		+ 1 Punkt in Fitness gewinnen" .. 
		gstats{ perk-mechanic } 1 < if 
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "'2 Punkte in mechanisch gewinnen!"
		then $)
;

: athletelevel 
	gstats{ perk-athlete } 3 >= if
		($ "'+ 2 Punkte in Fitness gewinnen		+ 2 Punkte in Starke gewinnen!" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "'+ 2 Punkte in Fitness gewinnen		+ 1 Punkt in Starke gewinnen" .. NEXT_LEVEL .. "'2 Punkte in Starke gewinnen!" $) 1 lvl
	then;
		($ "'+ 1 Punkt in Fitness gewinnen		+ 1 Punkt in Starke gewinnen" .. NEXT_LEVEL .. "'2 Punkte in Fitness gewinnen!" $)
;

: fighterlevel 
	gstats{ perk-fighter } 3 >= if
		($ "'+ 2 Punkte in Starke gewinnen		+ 2 Punkte in Schießen gewinnen!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "'+ 2 Punkte in Starke gewinnen		+ 1 Punkt in Schießen gewinnen" .. NEXT_LEVEL .. "2 Punkte im Schießen!" $) 1 lvl
	then;
		($ "'2 Punkte an Starke" .. NEXT_LEVEL .. "'2 Punkte in Starke gewinnen!" $)
;

: surgeonlevel 
	gstats{ perk-surgeon } 3 >= if
		($ "+ Erhalte 2 Punkte in Medizin!		+ Erhalte 2 Punkte in Schießen!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "3 points in shooting" .. NEXT_LEVEL .. "2 Punkte im Schießen!" $) 1 lvl
	then;
		($ "2 points in total" .. NEXT_LEVEL .. "'2 Punkte im Medizinalbereich!" $)
;

: gungineerlevel 
	gstats{ perk-gungineer } 3 >= if
		($ "'+ Gewinn 2 Punkte im Schießen!		+ Gewinn 2 Punkte im Mechanik!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "'+ Gewinn 2 Punkte im Schießen!		+ Gewinn 1 Punkt im Mechanik" .. NEXT_LEVEL .. "'2 Punkte in mechanisch gewinnen!" $) 1 lvl
	then;
		($ "'+ Gewinn 1 Punkt im Schießen		+ Gewinn 1 Punkt im Mechanik" .. NEXT_LEVEL .. "2 Punkte im Schießen!" $)
;

: healthcarelevel 
	gstats{ perk-healthcare } 3 >= if
		($ "'+ Startet mit 7 Medizinalversorgungen!		+ Gewinn 2 Punkte im Medizinalbereich!" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "'+ Startet mit 5 Medizinalversorgungen		+ Gewinn 2 Punkte im Medizinalbereich!" .. NEXT_LEVEL .. "'7 Medizinalversorgungen!" $) 1 lvl
	then;
		($ "'+ Startet mit 4 Medizinalversorgungen		+ Gewinn 1 Punkt im Medizinalbereich" .. NEXT_LEVEL .. "'5 Medizinalversorgungen, 2 im Medizinalbereich!" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "'+ Gewinn 3 Punkte im Schießen!" $) 2 lvl ;
: shotgunlevel ($ "'+ Gewinn 3 Punkte im Schießen!" $) 2 lvl ;
: riflelevel ($ "'+ Gewinn 3 Punkte im Schießen!" $) 2 lvl ;

: guncrazylevel 
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "'3 Punkte im Schießen, und ein Gewehr!" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "'2 Punkte im Schießen, und ein Gewehr!" $)
;

: carnutlevel 
	gstats{ perk-carnut } 3 >= if
		($ "+3 points in mechanical" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "'+ Gain 2 points in mechanical' in deutsch is '+ 2 Punkte in mechanisch gewinnen" .. NEXT_LEVEL .. "'3 points in mechanical!' in deutsch is '3 Punkte in mechanisch!" $) 1 lvl
	then;
		($ "'+ Gain 1 point in mechanical' in deutsch is '+ 1 Punkt in mechanisch gewinnen" .. NEXT_LEVEL .. "'2 points in mechanical' in deutsch is '2 Punkte in mechanisch" $)
;

: megabufflevel 
	gstats{ perk-megabuff } 3 >= if
		($ "'+ Gain 4 points in strength!' in deutsch is '+ 4 Punkte in Starke gewinnen!" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "'+ Gain 3 points in strength' in deutsch is '+ 3 Punkte in Starke gewinnen" .. NEXT_LEVEL .. "'4 points in strength!' in deutsch is '4 Punkte in Starke!" $) 1 lvl
	then;
		($ "'+ Gain 2 points in strength' in deutsch is '+ 2 Punkte in Starke gewinnen" .. NEXT_LEVEL .. "'3 points in strength' in deutsch is '3 Punkte in Starke" $)
;

: ultrafitlevel 
	gstats{ perk-ultrafit } 3 >= if
		($ "'+ Gain 4 points in fitness!' in deutsch is '+ 4 Punkte in Fitness gewinnen!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "'+ Gain 3 points in fitness' in deutsch is '+ 3 Punkte in Fitness gewinnen" .. NEXT_LEVEL .. "4 Punkte in Fitness!" $) 1 lvl
	then;
		($ "+ 2 Punkte in Fitness gewinnen" .. NEXT_LEVEL .. "3 Punkte in Fitness" $)
;

: martialartistlevel 
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "3 points in total" .. NEXT_LEVEL .. "4" $) 1 lvl
	then;
		($ "2 points in total" .. NEXT_LEVEL .. "'2 Punkte Fitness!" $)
;

: bruiserlevel 
	gstats{ perk-bruiser } 3 >= if
		($ "'+ Gewinn 3 Punkte an Starke!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "'+ Gain 2 points in strength' in deutsch is '+ 2 Punkte in Starke gewinnen" .. NEXT_LEVEL .. "'3 Punkte an Starke!" $) 1 lvl
	then;
		($ "'+ Gewinn 1 Punkt an Starke" .. NEXT_LEVEL .. "'2 Punkte an Starke" $)
;

: doglevel 
	gstats{ perk-dogfriend } 3 >= if
		($ "'+ 70% zusatzliche Chance, dass zufalliger Rekrut ein Hund ist" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "'+ 35% zusatzliche Chance, dass zufalliger Rekrut ein Hund ist" .. NEXT_LEVEL .. "'70% Chance!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "'35% Chance fur Rekruten, dass sie ein Hund sind" $)
;

: explorerlevel 
	gstats{ perk-explorer } 3 >= if
		($ "'+ ABL-Wiederholkosten kostet viel weniger Gas!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "'+ ABL-Wiederholkosten kosten weniger Gas" .. NEXT_LEVEL .. "'Viel weniger Gas fur ABL-Wiederholen!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "More rerolls for ABL" $)
;

: exwrestlerlevel 
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Gain 3 points in fitness!		+ Gain 1 point in strength!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+1 Fitness, +1 Strength" .. NEXT_LEVEL .. "'2 Punkte in Fitness gewinnen!" $) 1 lvl
	then;
		($ "+ 1 Punkt in Fitness gewinnen" .. 
		gstats{ perk-exwrestler } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 Punkt in Starke!"
		then $)
;

: hiddenpotentiallevel 
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+1 strength or fitness" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "'+ 1 Punkt in der anderen Fertigkeit" .. NEXT_LEVEL .. "'Zufalliger Punkt in Fitness oder Starke!" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "'1 Punkt in der anderen Fertigkeit" $)
		then
;

: hagglerlevel 
	gstats{ perk-haggler } 3 >= if
		($ "'+ Banditenabgaben sind geringer!" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "'+ Banditenabgaben sind geringer" .. NEXT_LEVEL .. "'Noch geringere Abgaben!" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "'Banditenabgaben sind geringer" $)
		then
;

: pathfinderlevel 
	gstats{ perk-pathfinder } 3 >= if
		($ "'+ 75% Chance, Strafen am 2. Tag zu uberspringen!" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "'+ 60% Chance, Strafe am 2. Tag zu uberspringen" .. NEXT_LEVEL .. "'75% Chance!" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "'60% Chance, Strafe am 2. Tag zu uberspringen" $)
		then
;

: trademarklevel 
	gstats{ perk-trademark } 3 >= if
		($ "'+ Der Standardwaffe ist ein robustes Messer!!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "'+ Standardwaffe: 50% Chance Aluminium Bat, 50% Messer" .. NEXT_LEVEL .. "'100% Chance auf robustes Messer!" $) 1 lvl
	then;
		($ "'+ Standardwaffe ist ein Aluminium Bat!" ..
		gstats{ perk-trademark } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "'50% Chance auf robustes Messer!" $)
		then $)
;

: naturalshotlevel 
	gstats{ perk-naturalshot } 3 >= if
		($ "'+ Erhalte 2 Punkte in Schießen!		+ Schießen kann 2 Punkte uber die ubliche Maximum gehen" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "'+ Erhalte 2 Punkte in Schießen!		+ Schießen kann 1 Punkt uber die ubliche Maximum gehen" .. NEXT_LEVEL .. "'2 Punkte uber Maximum!" $) 1 lvl
	then;
		($ "'+ Erhalte 1 Punkt in Schießen		+ Schießen kann 1 Punkt uber die ubliche Maximum gehen" .. 
		gstats{ perk-naturalshot } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 Punkte im Schießen!"
		then $)
;

: tstclevel 
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ "'Fitness beginnt mit 2!" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ "'Fitness beginnt mit 1" .. NEXT_LEVEL .. "2 * 1 = 2" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "100% and falls to 0 = 0%" $)
		then
;

: shieldofhopelevel 
	gstats{ perk-shieldofhope } 3 >= if
		($ "'- Sie verlieren 2 Moral jedes Mal, wenn Sie dem Tod ausweichen!" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "du verlierst 3 Moral jedes Mal, wenn du dem Tod entgehst" .. NEXT_LEVEL .. "2 morale only!" $) 1 lvl
	then;
		($ "4 morale loss per evade" ..
		gstats{ perk-shieldofhope } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "3 Moral verloren"
		then $)
;

: archerlevel
		($ "'+ Pfeile fur deinen Bogen zwischen Missionen herstellen, " $) ..
	gstats{ perk-archer } 3 >= if
		($ "3628800" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "'bis zu 7" .. NEXT_LEVEL .. "'Erstelle 10 Pfeile!" $) 1 lvl
	then;
		($ "'bis zu 4" ..
		gstats{ perk-archer } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "'Erstelle 7 Pfeile"
		then $)
;

: pyrolevel
		($ "'+ Lade deinen Blasrohr zwischen Missionen neu auf, " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "'bis zu 8 Ladungen!" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "'bis zu 6 Ladungen" .. NEXT_LEVEL .. "'Findet 8 Ladungen..." $) 1 lvl
	then;
		($ "'bis zu 4 Ladungen" ..
		gstats{ perk-pyro } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "'Findet 6 Ladungen"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"'Mechaniker" $perk
		($ "'Das Auto ist das Leben! Hinweis: Nicht notwendigerweise ein KOMPETENTER Mechaniker.	+ Mit einem Schraubendreher starten		" .. mechaniclevel $) $desc
		' mechanicperk applyword
		
	"'Athlet" $perk
		($ "1" .. athletelevel $) $desc
		' athleteperk applyword
		
	"Kampfer" $perk
		($ "'Diese Person war schon immer ein echter Kampfer.		+ Nimm eine Axt		" .. fighterlevel $) $desc
		' fighterperk applyword
		
	"'Chirurg" $perk
		($ "'Hat ein gutes Gespur fur Anatomie und einen wirklich ruhigen Handen.		+ Nimm ein Skalpell		" .. surgeonlevel $) $desc
		' surgeonperk applyword
		
	"'Waffenschmied" $perk
		($ "'Gut mit allem Mechanischen, und Waffen sind mechanisch.		+ Nimm eine Hacke		" .. gungineerlevel $) $desc
		' gungineerperk applyword
		
(*	"'Revolverheld" $perk
		($ "'Revolver zielen schnell und Munition ist reichlich vorhanden!		+ Nimm eine Pistole und 30 Patronen		" .. pistollevel $) $desc
		' pistolperk applyword
		
	"'Gewehrschutze" $perk
		($ "'Ein Gewehrschuss kann eine Zombie-Reihe durchschlagen, in richtigen Handen!		+ Nimm ein Gewehr und 24 Munition		" .. riflelevel $) $desc
		' rifleperk applyword
		
	"'Schrotflinten-Schutze" $perk
		($ "'Jeder weiß, dass Schrotflinten die wahren Zombie-Waffen sind!		+ Nimm eine Schrotflinte und 15 Patronen		" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"'Kampfkunstler" $perk
		($ "'Keine Waffen? Kein Problem!		+ Nimm einen starken zweihandigen unbewaffneten Angriff!!		- Verweigert Feuerwaffen, Kettensagen und einige andere!!		" .. martialartistlevel $) $desc
		' martialartistperk applyword		
		
	"Großer Schlager" $perk
		($ "'Bewegt sich langsam, schadet sehr, aushalt viel!		+ Mit besseren unbewaffneten Angriffen starten! Erleide eine zusatzliche Schlagwunde!		- Langsamer Gehgeschwindigkeit!		" .. bruiserlevel $) $desc
		' bruiserperk applyword
	
	"'Pfeilschutze" $perk
		($ "'Du hattest alle jene Waffen gesammelt wissen, dass sie irgendwann nutzlich werden. Tatsachlich. Du hattest es gewusst!		" .. guncrazylevel $) $desc
		' guncrazyperk applyword
	
	"'Gesundheitsversorgung" $perk
		($ "'Jerks werden von Zombies immer wieder gebissen. Besser bereit sein! 		" .. healthcarelevel $) $desc
		' healthcareperk applyword	
		
	"'Autonarr" $perk
		($ "'Der Autosammlerei ist fast eine Ubermacht geworden!		+ Mit einem besseren Auto starten		" .. carnutlevel $) $desc
		' carnutperk applyword
				
	"'Megabuff" $perk
		($ "'Vielleicht zu Muskulos, um kontrollieren zu konnen. Nutzlich fur das Heben und Wurfschwerem Mobel!		+ Mit einem Metallrohr starten		" .. megabufflevel $) $desc
		' megabuffperk applyword
		
	"'Ultrafit" $perk
		($ "'Das Yoga hat sich wirklich gelohnt!		+ Mit etwas Granola-Bars starten		" .. ultrafitlevel $) $desc 
		' ultrafitperk applyword
				
	"'Hundefreund" $perk
		($ "'Diese Person liebt Hunde und lauft in sie hinein!		+ Wutende Hunde konnen freundlich werden		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Datei-Explorer" $perk
		($ "'Manche Menschen haben einfach ein wirklich gutes Gespur fur die Richtung beim Fahren!		+ Erhalte eine zusatzliche Standortwahl wahrend Always Be Looting-Ereignissen!		" .. explorerlevel $) $desc
		' explorerperk applyword
		
	"'Ex-Ringer" $perk
		($ "'War vor einem tragischen Unfall im Ring ganz oben!		+ Aufheben und dann Werfen oder Niederschlagen von umgeworfenen Zombies!		- Hohe Penalty fur maximale Schießfahigkeit.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword
		
	"'Verstecktes Potenzial" $perk
		($ "'Sieht unscheinbar aus, kann aber mit Training mehr leisten als andere!		+ Zufallig einen Punkt in Kraft oder Fitness erhalten. Es kann dann 1 uber dem Maximum liegen!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword
	
	"'Top-Verkaufer" $perk
		($ "'Gute Verkaufskunst hat immer noch ihre Nische!		+ Erhalte 1-8 zusatzliche Nahrung, wenn du an einen Waffenkaufer verkaufst, je nachdem originaler Preis.		+ Keine Moralstrafe, wenn man Banditen mit Nahrung Tribut zahlt!		" .. hagglerlevel $) $desc
		' hagglerperk applyword
	
	"'Pfadfinder" $perk
		($ "'Wandern erfahrung hilft, Waldgefahren zu vermeiden!		+ Entfernt eine Strafveranstaltung am 1. Gehtag, jedes Mal, wenn du das Auto verlierst!		" .. pathfinderlevel $) $desc
		' pathfinderperk applyword
	
	"'Handelsmarke Waffe" $perk
		($ "'Springt ins Auge mit einer Signaturwaffe!		+ Beginnt mit einer speziellen Waffe, je nach Eigenschaft!		- Kann diese Waffe nicht fallen lassen, auch nicht beim Tod.		" .. trademarklevel $) $desc
		' trademarkperk applyword
		
	"' Naturlicher Schutze" $perk
		($ "'Ein Naturtalent furs Schießen! Benotigt nur mehr Training und vielleicht sogar eine Waffe und Munition!		" .. naturalshotlevel $) $desc
		' naturalshotperk applyword
	
	"'T*S*T*C" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword
		
	"'Schild der Hoffnung" $perk
		($ "'Keeps going through sheer willpower!\n		+ Schutzt vor todlichen Treffern, wenn Moral uber :" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword
		
	"'Bogen und Pfeile" $perk
		($ "'Schussbogen wurde eine nutzliche Hobby!\n		+ Startet mit einer stillen Pfeilspitze, 30 Pfeilen, 2 Punkte in Starke!\n		- Kann diese Pfeilspitze nicht fallen lassen, auch im Tode.\n		', 74783064" .. archerlevel $) $desc
		' archerperk applyword
		
	"'Pyromane" $perk
		($ "'Zombies sind extrem entzundlich!\n		+ Startet mit einer Blasrohrflamme und Schutz gegen Feuer!\n		- Kann diese Blasrohrflamme nicht fallen lassen, auch im Tode.\n		', 73229513" .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"'TEST" i .. $perk
		($ "'Schussbogen wurde eine nutzliche Hobby!\n		+ Startet mit einer stillen Pfeilspitze, 30 Pfeilen, 2 Punkte in Starke!\n		- Kann diese Pfeilspitze nicht fallen lassen, auch im Tode.\n		', 74783064" .. archerlevel $) $desc
		' archerperk applyword
	next
*)
		
	// "'Barbarian"
	// "'Aggressiv', 743544"
	// "'Heftig"
			
	// Traits
	"'Paranoide', 296016" $trait
		"'Eine Kombination hoher Wahrnehmung und extremer Pessimismus lasst jemanden auf die schlimmste Moglichkeit vorbereiten!\n		+ Erkennbar fur Charaktereigenschaften bei neuen Rekruten\n		+ Stets auf der Suche nach Gefahr\n		- Kann ein echter Grumpus sein\n		', 148649284" $desc
		' paranoidtrait applyword
	"'Unverfanglich', 414258" $trait
		"'Ein gutes Lebenserlebnis kombiniert mit mangelnder Wahrnehmung erlaubt magische Leugnungen!\n		+ Ignoriert Verzweiflung\n		- Schlechte Wurfel fur Wahrnehmung und Verstand\n		', 112582299" $desc
		' oblivtrait applyword
	"'Anziehend', 292086" $trait
		"'Aus der Sicht anderer, guter Einstellung und reines Charisma gibt jemandem etwas Besonderes!\n		+ Verzaubert sich in kostenlose Sachen oder aus schlechten Situationen heraus\n		- Kann sich nicht verzaubern aus alles\n		', 184495534" $desc
		' charmtrait applyword
	"'Irritierend', 508789" $trait
		"This person thinks they're soooooo cool. But they're not! They're just annoying!
		+ Tell people to 'Cool it'
		- Anger pretty much everybody" $desc
		' gratingtrait applyword
	"Rauber" $trait
		"0" $desc
		' bandittrait applyword
	"Geheimnisvolle Vergangenheit" $trait
		"This person... has a mysterious past......
		+ 3 points given to fight skills at random
		- Randomized and extreme personality!" $desc
		' mysterytrait applyword
	"Praktikum" $trait
		"'Hat eine Vielzahl an nutzlichen Fahigkeiten, aber ist etwas langweilig.		+ 3 Punkte zusatzlich fur Kampf-Fahigkeiten zufallig		+ 3 Punkte zusatzlich fur Unterstutzung-Fahigkeiten zufallig		- Langweilige Personlichkeit" $desc
		' practicaltrait applyword
	"'Krieger" $trait
		"'Guter Anfang bei Zombie-Schlagen, mit einer unauffalligen Personlichkeit.		+ 2 Punkte mehr Starke!		+ 2 Punkte mehr Fitness!		- Langweilige Personlichkeit" $desc
		' warriortrait applyword
	"'Heftig besonnen" $trait
		"'Jemand hat eine schlechte Temperament! Die Aggression kann nutzlich sein.		+ 1 zusatzlicher Punkt in Starke		- Schlechter Temperament aufgrund niedriger Komposure		+ Temperament kann manchmal hilfreich sein" $desc
		' fiercetrait applyword
	"'Ruhender im Feuersturm" $trait
		"'Ruhend und samtig. Nutzlich bei Schuss in eine Horde!		+ Sehr ruhig aufgrund hoher Komposure		+ 1 zusatzlicher Punkt in Schießen" $desc
		' calmtrait applyword
	"'Pflegend" $trait
		"'Immer fur andere da! Bis jetzt nicht Zombiefutter geworden.		+ 2 Punkte mehr Heilung! Herzensgutes Attitude		+ Kann einen Punkt uber die Maximum erreichen fur Heilung-Skill!!		- Moglicherweise eine Inszenierung" $desc
		' nurturetrait applyword
	"'Erganzend" $trait
		"'Gemutlich mit Maschinen, wie Autos.		+ 2 Punkte mehr Mechanik! Großartige Intelligenz-Prufungen!		+ Kann einen Punkt uber die Maximum erreichen fur Mechanik-Skill!!		- Moglicherweise benotigt mehr Ubung zum Reparieren des Autos" $desc
		' inventtrait applyword
	"'Panischer Plarrier" $trait
		"'Eher zerbrechlich. Aber richtig gut im Weglaufen!		+ Bonus auf Fluchtgeschwindigkeit!		- Nimmt einen Schlag weniger ein als normal		- Schlechte Gesinnung" $desc
		' frantictrait applyword
	"'Robuster Typ" $trait
		"'Sehr robust! Die Muskeln! Kein Langzeitplaner.		+ Nimmt einen Schlag mehr ein als normal		- Schlechte Wurfe bei Intelligenztests" $desc
		' toughtrait applyword
	"'BERSERK!" $trait
		"Destroy all zombies! Never retreat! Oh no, I got bit!
		+ 4 points to strength, fitness, and shooting!!
		+ Can go one over the maximum for the above stats!!!
		- Super low personality stats! Dies in one bite!!" $desc
		' berserktrait applyword
	"'Zivilisiert" $trait
		"'Behalt alte Werte, bevor die Welt verruckt spielte. Das ist gut und schlecht.		+ Super hohe Loyalitat und Personlichkeitswerte!		+ 1 Punkt auf medizinische und mechanische Fertigkeiten!!		- Dauerhafte und signifikante Moralstrafe!!" $desc
		' civiltrait applyword
	"'Guter Schlafer" $trait
		($ "'Schlaft uberall und jederzeit. #1 bester Schlafer!		+ Ubermenschliches Schlafvermogen! Braucht sehr wenig Schlaf.		+ Erhalt niemals den Status MUDE, jemals." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"'Gourmet" $trait
		($ "'Mag altes Dosengemuse sehr!		+ Ein vollstandiges Mahl stellt 1 Punkt der Moral dieses Charakters wieder her, bis zur vollen Marke! Erhalt einen zusatzlichen Punkt maximaler Gesundheit!		- Isst ein bisschen mehr, 3 Nahrung statt 2. Ein niedriger Nahrungsvorrat verringert die Moral schneller!" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Stadtsucher" $trait
		($ "'Mit einem interessanten Leben gesegnet!		+ Deutlich großere Chance, auf ein seltsames Gebaude oder einen seltsamen Charakter in Stadtplunderungsereignissen zu stoßen! Normale Chance: 10%  Mit Eigenschaft: 50%		+ Die Chance, auf Handlerlager zu stoßen, wird verdoppelt!" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Reiseleicht" $trait
		($ "3 points" .. travellight-lock $) $desc
		' travellighttrait applyword
	"'Heldentyp" $trait
		($ "'Ich werde immer dein Bodyguard sein. Nun ja, einmal. + Retttet einen Teamkameraden in einem Text-Event vor dem Tod! - Tut dies nur einmal pro Spiel! + Beginnt mit maximaler Loyalitat!" .. herotype-lock $) $desc
		' herotypetrait applyword
	"'Der kleine Esser" $trait
		($ "'Isst viel weniger als normal! Nimmt winzige Bissen!		+ Ein Vollmahl nur mit 1 Nahrung!!		- Kann eine 2 Punkte Strafe zur maximalen Starke bekommen!		- Kann eine 1 Punkte Strafe zur maximalen Fitness bekommen." .. tinyeat-lock $) $desc
		' tinyeattrait applyword	
	"'Anime Fan" $trait
		($ "1.0.0		- Initial release." .. animefan-lock $) $desc
		' animefantrait applyword	
	"Fachmann" $trait
		($ "'Zu sehr auf eine Methode zur Zombieabwehr fixiert.		+ 2 Punkte fur Kraft, Fitness und Schießen		+ Kann die maximale Grenze fur die oben genannten Statistiken uberschreiten!!		- Kann nur EINE Waffe zur Zeit tragen!!" .. specialist-lock $) $desc
		' spectrait applyword
	"'Ringer" $trait
		($ "'Wenn ein Zombie umfallt, kannst du ihn aufheben!		+ Werfe oder schmettere getragene Zombies!		- Langweilige Personlichkeit" .. grappler-lock $) $desc
		' grapplertrait applyword
	"'Phoenix" $trait
		($ "'Der Phonix erhebt sich aus der Asche! *flattert mit den Armen wie Flugel*		+ Resurrektiert sich bei Tod, vollstandig gesund!!		+ Unbrennbar! Stehe in den Flammen!		- Verliert die gesamte Eigenschaft nach dem ersten Tod!" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"'Dusseliger Genie" $trait
		($ "'Immer fur große Dinge bestimmt! Hat sich nie bemuht, es zu verdienen.		+ Einen Punkt Bonus auf die maximale Grenze fur alle Fahigkeiten!		- Nimmt 1 Treffer weniger als normal!		- 2 Punkte Malus auf maximale Moral!" .. savant-lock $) $desc
		' savanttrait applyword
	"'Schneller Lerner" $trait
		($ "'Fangt niedrig an, aber lernt neue Fahigkeiten schnell!		+ Bekommt doppelt so viel Schieß-, Mechanik- und Medizinfahigkeit!		- Jeder Wachstumsbonus hort auf, wenn die Fahigkeit auf 4 Punkte kommt" .. fastlearn-lock $) $desc
		' fastlearntrait applyword
	
		
	// "'Guter Schlafer"
	// "'Gourmet"
	// "Stadtsucher"
	// "Reiseleicht"
	
	// "'Der kleine Esser"
	// "'Anime Fan"
	// "Fachmann"
	// "'Ringer"
	// "'Phoenix"
	// ""
	// ""
	// ""
;

defperks

}
