perkdef{

: boring 2 4 rnd ;
: hilow 50 %chance if 0 1 rnd else 5 6 rnd then ;

// WEAPON_ <- chara .trademarkwep
: .trademarkwep args( weapon chara )
	<- chara .perk@ "Arma de Marca Registrada" $= if
		<- weapon <- chara .weapona!
		1 <- chara .weapon_nodropa!
	then
;

// Traits

: paranoidtrait args( chara )
	"PARANOICA APLICADA EN EL CARACTER " type <- chara .name@ print
	6 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: oblivtrait args( chara )
	"OBLIDIOSA APLICADA EN EL CARACTER " type <- chara .name@ print
	0 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: bandittrait args( chara )
	"BANDIDO APLICADO EN EL CARACTER " type <- chara .name@ print
	0 <- chara .composure! 0 <- chara .loyalty!
	boring <- chara .wits! boring <- chara .attitude!
	<- chara .temperREV <- chara .loyaltyREV
;

: charmtrait args( chara )
	"ENCANTADOR APLICADO EN CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
;

: tmgrating-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 
			20 <- chara .stackeda!
		then;
	then;
;

: gratingtrait args( chara )
	"AGRADABLE APLICADO EN CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude!
	<- chara .witsREV <- chara .attitudeREV
	WEAPON_SPORTSHORN <- chara .trademarkwep
	<- chara .perk@ "Arma de Marca Registrada" $= if
		' tmgrating-main-events <- chara .main_events!
	then
;

: fiercetrait args( chara )
	"APACIBLE PESADA APLICADA EN CHAR " type <- chara .name@ print
	0 <- chara .composure!
	1 STAT_STRENGTH <- chara .stat+
	<- chara .temperREV <- chara .strengthREV
;

: calmtrait args( chara )
	"CALMA SOBRE EL FUEGO APLICADA EN CHAR " type <- chara .name@ print
	6 <- chara .composure!
	1 STAT_SHOOTING <- chara .stat+
	<- chara .temperREV <- chara .shootingREV
	WEAPON_HUNTING <- chara .trademarkwep
;

: nurturetrait args( chara )
	"CRIADOR APLICADO EN CHAR " type <- chara .name@ print
	boring <- chara .wits! 6 <- chara .attitude!
	1 STAT_MEDICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .stat+
	<- chara .attitudeREV <- chara .medicalREV
	WEAPON_BONESAW <- chara .trademarkwep
;

: tminvent-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_EBLOWER <- chara .weapona@ = if 
			25 <- chara .stackeda!
		then;
	then;
;

: inventtrait args( chara )
	"INVENTIVO APLICADO EN CHAR " type <- chara .name@ print
	6 <- chara .wits! boring <- chara .attitude!
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MECHANICAL <- chara .stat+
	<- chara .witsREV <- chara .mechanicREV
	WEAPON_EBLOWER <- chara .trademarkwep
	<- chara .perk@ "Arma de Marca Registrada" $= if
		' tminvent-main-events <- chara .main_events!
	then
;

: frantictrait args( chara )
	"QUEJOSO INFANTILO APLICADO EN CHAR " type <- chara .name@ print
	boring <- chara .wits! 0 <- chara .attitude!
	1 STAT_DEXTERITY <- chara .stat+ 
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	<- chara .attitudeREV
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: toughtrait args( chara )
	"RESISTENTE TIPO APLICADO EN CHAR " type <- chara .name@ print
	boring <- chara .attitude! 0 <- chara .wits!
	1 STAT_VITALITY <- chara .stat+ <- chara .health++nostat
	<- chara .witsREV
;

: berserktrait args( chara )
	"BERSERK! APLICADO EN CHAR " type <- chara .name@ print
	0 <- chara .wits! 0 <- chara .attitude! 0 <- chara .composure! 0 <- chara .loyalty!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	3 STAT_STRENGTH <- chara .stat+
	3 STAT_FITNESS <- chara .stat+
	3 STAT_SHOOTING <- chara .stat+
	-2 STAT_VITALITY <- chara .stat+ <- chara .health-- <- chara .health--
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
;

: civiltrait args( chara )
	"CIVILIZADO! APLICADO EN CHAR " type <- chara .name@ print
	6 <- chara .wits! 6 <- chara .attitude! 6 <- chara .composure! 6 <- chara .loyalty!
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+
	-3 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	<- chara .witsREV <- chara .attitudeREV <- chara .temperREV <- chara .loyaltyREV 
	<- chara .mechanicREV <- chara .medicalREV
	WEAPON_GUITAR <- chara .trademarkwep
;

: mysterytrait args( chara )
	"MISTERIOSO APLICADO EN CHAR " type <- chara .name@ print
	hilow <- chara .wits! hilow <- chara .attitude! hilow <- chara .composure!
	<- chara .perk@ "Artista Marcial" $= if
		3 for 50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then next
	else
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
		50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
		50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	then
;

: practicaltrait args( chara )
	"PRACTICAL APPLIED ON CHAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	// <- chara .witsREV <- chara .attitudeREV <- chara .temperREV
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_STRENGTH <- chara .stat+ else 1 STAT_FITNESS <- chara .stat+ then  
	50 %chance if 1 STAT_FITNESS <- chara .stat+ else 1 STAT_SHOOTING <- chara .stat+ then
	50 %chance if 1 STAT_MEDICAL <- chara .stat+ else 1 STAT_MECHANICAL <- chara .stat+ then
	1 STAT_MEDICAL <- chara .stat+ 1 STAT_MECHANICAL <- chara .stat+	
;

: warriortrait args( chara )
	"GUERRERO APLICADO EN CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	<- chara .strengthREV <- chara .fitnessREV
;

: spectrait args( chara )
	"ESPECIALISTA APLICADO EN CAR " type <- chara .name@ print
	// boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	1 STAT_STRENGTH <- chara .bonus+
	1 STAT_FITNESS <- chara .bonus+
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_STRENGTH <- chara .stat+
	1 STAT_FITNESS <- chara .stat+
	1 STAT_SHOOTING <- chara .stat+
	1 <- chara .carrying.slot_count!
	<- chara .shootingREV <- chara .strengthREV <- chara .fitnessREV
	<- chara .perk@ "Arco y flechas" $= if
		WEAPON_BOW <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		60 <- chara .stackeda!
	then
	<- chara .perk@ "Coleccionista de armas" $= if
		gstats{ perk-guncrazy } 3 >= if 1 WEAPON_SHOTGUN trunk.weapon+ then
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		gstats{ perk-guncrazy } 3 < if 1 WEAPON_PISTOL trunk.weapon+ then
		0 <- chara .weaponb!
		0 <- chara .weaponc!
	then
	<- chara .perk@ "Pyromano" $= if
		WEAPON_NAPALM <- chara .weapona!
		1 <- chara .weapon_nodropa!
		0 <- chara .weaponb!
		25 <- chara .stackeda!
	then
	WEAPON_KNIGHT <- chara .trademarkwep
;

: travellighttrait args( chara )
	"VIAJALUZ APLICADO EN CAR " type <- chara .name@ print
	1 STAT_DEXTERITY <- chara .stat+ 
	1 STAT_FITNESS <- chara .stat+
	2 <- chara .carrying.slot_count!
	<- chara .perk@ "Coleccionista de armas" $= if
		gstats{ perk-guncrazy } 2 >= if 1 WEAPON_RIFLE trunk.weapon+ then
		0 <- chara .weaponc!
	then
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: grapplertrait args( chara )
	"LUCHADOR APLICADO EN CAR " type <- chara .name@ print
	boring <- chara .wits! boring <- chara .attitude! boring <- chara .composure!
	
	<- chara .perk@ "Exluchador" $= if
		// 2 STAT_STRENGTH <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
		8 <- chara .specialbody!
		<- chara statmod{ .zombiewrestler }
		<- chara statmod{ .nocanshoot }
	else
		<- chara statmod{ .zombielifter }
	then
	
	WEAPON_NIGHTSTICK <- chara .trademarkwep
;

: herotypetrait args( chara )
	"TIPOHEROE APLICADO EN CAR " type <- chara .name@ print
	6 <- chara .loyalty! <- chara .loyaltyREV
;

: soundsleeptrait args( chara )
	"SONAMBULO APLICADO EN CAR " type <- chara .name@ print
	<- chara statmod{ .soundsleep }
;

: gourmandtrait args( chara )
	"GURMETE APLICADO EN CAR " type <- chara .name@ print
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: cityseektrait args( chara )
	"CIUDADVEO APLICADO EN CAR " type <- chara .name@ print
;

: tinyeattrait args( chara )
	"COMIDITO APLICADO EN CAR " type <- chara .name@ print
	-1 STAT_FITNESS <- chara .bonus+ -2 STAT_STRENGTH <- chara .bonus+
	WEAPON_SCLEAVER <- chara .trademarkwep
;

: animefantrait args( chara )
	"AFICIONADO AL ANIME APLICADO EN CAR " type <- chara .name@ print
	4 <- chara .morale!
	WEAPON_TRUEKATANA <- chara .weapona!
	1 <- chara .weapon_nodropa!
	WEAPON_NKATANA <- chara .trademarkwep
;

: phoenixtrait args( chara )
	"FENIX APLICADO EN CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	WEAPON_HOTPOKER <- chara .trademarkwep
;

: savanttrait args( chara )
	"SAVANT APLICADO EN CHAR " type <- chara .name@ print
	-1 STAT_VITALITY <- chara .stat+ <- chara .health--
	-2 STAT_MORALE <- chara .bonus+ 4 <- chara .morale!
	1 STAT_SHOOTING <- chara .bonus+
	1 STAT_MECHANICAL <- chara .bonus+
	1 STAT_MEDICAL <- chara .bonus+
;

: fastlearntrait args( chara )
	"RAPIDO APRENDIZAJE APLICADO EN CHAR " type <- chara .name@ print
;
	
// Perks

: healthcareperk args( chara )
	"SALUD APLICADA EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-healthcare } 3 >= if
		7 trunk-medical+
		2 STAT_MEDICAL <- chara .stat+
	else
		gstats{ perk-healthcare } 2 >= if
			5 trunk-medical+
			2 STAT_MEDICAL <- chara .stat+
		else
			4 trunk-medical+
			1 STAT_MEDICAL <- chara .stat+
		then
	then crap-weapon <- chara .weapona!
;
	
: mechanicperk args( chara )
	"MECANICO APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-mechanic } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-mechanic } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_FITNESS <- chara .stat+
		then	
	then WEAPON_WRENCH <- chara .weapona!
	
;

: athleteperk args( chara )
	"ATLETA APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-athlete } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 2 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-athlete } 2 >= if
			2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		then	
	then sports-weapon <- chara .weapona!
;

: fighterperk args( chara )
	"LUCHADOR APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-fighter } 3 >= if
		2 STAT_STRENGTH <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-fighter } 2 >= if
			2 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_STRENGTH <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_HATCHET <- chara .weapona!

;

: surgeonperk args( chara )
	"CIRUGIANO APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-surgeon } 3 >= if
		2 STAT_MEDICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-surgeon } 2 >= if
			2 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MEDICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_SCALPEL <- chara .weapona!
;

: gungineerperk args( chara )
	"FABRICANTE DE ARMAS APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-gungineer } 3 >= if
		2 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
	else
		gstats{ perk-gungineer } 2 >= if
			1 STAT_MECHANICAL <- chara .stat+ 2 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+ 1 STAT_SHOOTING <- chara .stat+
		then	
	then WEAPON_CROWBAR <- chara .weapona!
;

// Pistoleer, Shotgunner, and Rifleman are no longer available
// I set them to have no level in the new system for legacy support

: pistolperk args( chara )
	"PISTOLA APLICADA EN EL CARACTER " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	30 trunk-bullet+
	crap-weapon <- chara .weapona!
	WEAPON_PISTOL <- chara .weaponb!
;

: shotgunperk args( chara )
	"ESCOPETA APLICADA EN EL CARACTER " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+	
	crap-weapon <- chara .weapona!
	15 trunk-shotgun-shell+
	WEAPON_SHOTGUN <- chara .weaponb!	
;

: rifleperk args( chara )
	"FUSIL APLICADO EN EL CARACTER " type <- chara .name@ print
	3 STAT_SHOOTING <- chara .stat+
	crap-weapon <- chara .weapona!
	24 trunk-rifle-shell+
	WEAPON_RIFLE <- chara .weaponb!	
;

: guncrazyperk args( chara )
	"ENAMORADO DE LAS ARMAS APLICADO EN EL CARACTER " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	gstats{ perk-guncrazy } 3 >= if
		3 STAT_SHOOTING <- chara .stat+
		WEAPON_SHOTGUN <- chara .weaponb! 8 trunk-shotgun-shell+
		WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		1 WEAPON_PISTOL trunk.weapon+
	else
		gstats{ perk-guncrazy } 2 >= if
			2 STAT_SHOOTING <- chara .stat+
			WEAPON_RIFLE <- chara .weaponc!	12 trunk-rifle-shell+
		else
			1 STAT_SHOOTING <- chara .stat+
		then WEAPON_PISTOL <- chara .weaponb!
	then 17 trunk-bullet+
;

: carnut-picker
	0 stack
		CAR_BUG shove
		CAR_GRANDPA shove
		CAR_MUSCLE1 shove
		CAR_MUSCLE2 shove
		CAR_HOTROD shove
		CAR_STATIONWAGON shove
	shuffles pops nip
;

: carnut? args( chara ) <- chara .perk@ "Enamorado de los coches" $= ;

: carnutperk args( chara )
	"ENAMORADO DE LOS COCHES APLICADO EN EL CARACTER " type <- chara .name@ print
	gstats{ perk-carnut } 3 >= if
		3 STAT_MECHANICAL <- chara .stat+
	else
		gstats{ perk-carnut } 2 >= if
			2 STAT_MECHANICAL <- chara .stat+
		else
			1 STAT_MECHANICAL <- chara .stat+
		then	
	then crap-weapon <- chara .weapona!
// Commented out to fix the "rostros familiares da un coche a la fuerza" problem
//	carnut-picker to starting-car
//	starting-car get-car
;

: megabuffperk args( chara )
	"MEGABUFF aplicado al personaje " type <- chara .name@ print
	gstats{ perk-megabuff } 3 >= if
		4 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-megabuff } 2 >= if
			3 STAT_STRENGTH <- chara .stat+	
		else
			2 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_METAL <- chara .weapona!
;

: ultrafitperk args( chara )
	"ULTRAFIT aplicado al personaje " type <- chara .name@ print
	gstats{ perk-ultrafit } 3 >= if
		4 STAT_FITNESS <- chara .stat+
	else
		gstats{ perk-ultrafit } 2 >= if
			3 STAT_FITNESS <- chara .stat+
		else
			2 STAT_FITNESS <- chara .stat+
		then	
	then crap-weapon <- chara .weapona! 2 trunk-food+
;

: bruiserperk args( chara )
	"BRUISER aplicado al personaje " type <- chara .name@ print
	gstats{ perk-bruiser } 3 >= if
		3 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-bruiser } 2 >= if
			2 STAT_STRENGTH <- chara .stat+	
		else
			1 STAT_STRENGTH <- chara .stat+	
		then	
	then WEAPON_BOXING <- chara .weapon_default! 
	1 STAT_VITALITY <- chara .stat+	<- chara .health++nostat
	-1 STAT_DEXTERITY <- chara .bonus+
;

: martialartistperk args( chara )
	"MARTIAL ARTIST aplicado al personaje " type <- chara .name@ print
	gstats{ perk-martialartist } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_FITNESS <- chara .bonus+
	else
		gstats{ perk-martialartist } 2 >= if
			2 STAT_FITNESS <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then	
	then 1 STAT_STRENGTH <- chara .stat+
	WEAPON_KUNG <- chara .weapon_default! <- chara .nocanshoot
	-10 STAT_SHOOTING <- chara .bonus+
;

: dogfriendperk args( chara )
	"AMIGO DEL PERRO aplicado al personaje " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .dogpal }
;

: explorerperk args( chara )
	"EXPLORER aplicado al personaje " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .explorer }
;

: exwrestlerperk args( chara )
	"EX-WRESTLER aplicado al personaje " type <- chara .name@ print
	gstats{ perk-exwrestler } 3 >= if
		2 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
	else
		gstats{ perk-exwrestler } 2 >= if
			1 STAT_FITNESS <- chara .stat+ 1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then 
	then <- chara statmod{ .zombielifter }
		-3 STAT_SHOOTING <- chara .bonus+
		0 <- chara .loyalty! <- chara .loyaltyREV 
;

: hiddenpotentialperk args( chara )
	"HIDDENPOT aplicado al personaje " type <- chara .name@ print
	50 %chance if
		1 STAT_FITNESS <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_STRENGTH <- chara .stat+ then
	else
		1 STAT_STRENGTH <- chara .bonus+
		gstats{ perk-hiddenpotential } 2 >= if 1 STAT_FITNESS <- chara .stat+ then
	then
	gstats{ perk-hiddenpotential } 3 >= if
		50 %chance if
			1 STAT_STRENGTH <- chara .stat+
		else
			1 STAT_FITNESS <- chara .stat+
		then
	then
;

: hagglerperk args( chara )
	"HAGGLER aplicado al personaje " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .haggler }
;

: pathfinderperk args( chara )
	"PATHFINDER aplicado al personaje " type <- chara .name@ print
	crap-weapon <- chara .weapona!
	<- chara statmod{ .pathfinder }
;

: trademarkperk args( chara )
	"TRADEMARK aplicado al personaje " type <- chara .name@ print
	gstats{ perk-trademark } 3 >= if
		WEAPON_MACHETE2
	else
		gstats{ perk-trademark } 2 >= if
			50 %chance if WEAPON_ALUMINUM else WEAPON_MACHETE2 then
		else
			WEAPON_ALUMINUM 
		then	
	then <- chara .trademarkwep
;

: naturalshotperk args( chara )
	"NATURALSHOT aplicado al personaje " type <- chara .name@ print
	gstats{ perk-naturalshot } 3 >= if
		2 STAT_SHOOTING <- chara .bonus+ 
	else
		gstats{ perk-naturalshot } 2 >= if
			1 STAT_SHOOTING <- chara .bonus+ 
			1 STAT_SHOOTING <- chara .stat+
		else
			1 STAT_SHOOTING <- chara .bonus+ 
		then 
	then
	crap-weapon <- chara .weapona!
;

: tstcperk args( chara )
	"T*S*T*C APLICADO EN CHAR " type <- chara .name@ print
	gstats{ perk-tstc } 3 >= if
		-4 STAT_FITNESS <- chara .bonus+ 
	else
		gstats{ perk-tstc } 2 >= if
			-5 STAT_FITNESS <- chara .bonus+ 
		else
			-6 STAT_FITNESS <- chara .bonus+ 
		then 
	then 6 STAT_FITNESS <- chara .stat+ 
	6 STAT_STRENGTH <- chara .bonus+
;

: shieldofhopeperk args( chara )
	"SHIELDOFHOPE APLICADO EN CHAR " type <- chara .name@ print
	crap-weapon <- chara .weapona!
;

: archer-formula args( chara )
	gstats{ perk-archer } 3 * 1 + <- chara .trait@ "Especialista" $= if 2 * then +
;

: archer-max args( chara )
	<- chara .trait@ "Especialista" $= if 60 else 30 then
;

: archer-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		WEAPON_BOW <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara archer-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara archer-max > if <- chara archer-max <- chara .stackeda! then
		then;
		WEAPON_BOW <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara archer-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara archer-max > if <- chara archer-max <- chara .stackedb! then
		then;
	then;
;

: archerperk args( chara )
	"ARCO Y FLECHA APLICADO EN CHAR " type <- chara .name@ print
	2 STAT_STRENGTH <- chara .stat+
	crap-weapon <- chara .weapona!
	WEAPON_BOW <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' archer-main-events <- chara .main_events!
;

: pyro-weapon args( chara )
	<- chara .trait@ "Especialista" $= if WEAPON_NAPALM else WEAPON_BLOWTORCH then
;

: pyro-formula args( chara )
	gstats{ perk-pyro } 2 * 2 + <- chara .trait@ "Especialista" $= if 2 + then +
;

: pyro-max args( chara )
	<- chara .trait@ "Especialista" $= if 25 else 30 then
;

: pyro-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if
		<- chara pyro-weapon <- chara .weapona@ = if 
			<- chara .stackeda@ <- chara pyro-formula <- chara .stackeda!
			<- chara .stackeda@ <- chara pyro-max > if <- chara pyro-max <- chara .stackeda! then
		then;
		<- chara pyro-weapon <- chara .weaponb@ = if 
			<- chara .stackedb@ <- chara pyro-formula <- chara .stackedb!
			<- chara .stackedb@ <- chara pyro-max > if <- chara pyro-max <- chara .stackedb! then
		then;
	then;
;

: pyroperk args( chara )
	"PYROMANIAO CHAR " type <- chara .name@ print
	<- chara statmod{ .fireproof }
	crap-weapon <- chara .weapona!
	WEAPON_BLOWTORCH <- chara .weaponb!
	1 <- chara .weapon_nodropb!
	30 <- chara .stackedb!
	' pyro-main-events <- chara .main_events!
;

: NEXT_LEVEL cr$ .. cr$ .. RED .. "NIVEL SUPERIOR: " ;
: LOCKED cr$ .. cr$ .. RED .. 
	game.location 0 > if "BLOQUEADO! " else "BLOQUEADO: Desbloquea en Perks & Traits Hut en Zombo Town" then
	
;
// Formerly : cr$ .. "NIVEL SUPERIOR: " rbold

: mechaniclevel 
	gstats{ perk-mechanic } 3 >= if
		($ "+ Obten 2 puntos en mecanica!		+ Obten 2 puntos en fitness!" $) 2 lvl
	then;
	gstats{ perk-mechanic } 2 >= if
		($ "+ Obten 2 puntos en mecanica!		+ Obten 1 punto en fitness" .. NEXT_LEVEL .. "2 puntos en fitness!" $) 1 lvl
	then;
		($ "+ Obten 1 punto en mecanica		+ Obten 1 punto en fitness" .. 
		gstats{ perk-mechanic } 1 < if 
			($ LOCKED $) 1 lock
		else
			NEXT_LEVEL .. "2 puntos en mecanica!"
		then $)
;

: athletelevel 
	gstats{ perk-athlete } 3 >= if
		($ "+ Obten 2 puntos en fitness!		+ Obten 2 puntos en fuerza!" $) 2 lvl
	then;
	gstats{ perk-athlete } 2 >= if
		($ "+ Obten 2 puntos en fitness!		+ Obten 1 punto en fuerza" .. NEXT_LEVEL .. "2 puntos en fuerza!" $) 1 lvl
	then;
		($ "+2 points in fitness" .. NEXT_LEVEL .. "2 puntos en fitness!" $)
;

: fighterlevel 
	gstats{ perk-fighter } 3 >= if
		($ "+ Obten 2 puntos en fuerza!		+ Obten 2 puntos en tiro!" $) 2 lvl
	then;
	gstats{ perk-fighter } 2 >= if
		($ "+ Obten 2 puntos en fuerza!		+ Obten 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en tiro!" $) 1 lvl
	then;
		($ "+ Obten 1 punto en fuerza		+ Obten 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en fuerza!" $)
;

: surgeonlevel 
	gstats{ perk-surgeon } 3 >= if
		($ "+ Obten 2 puntos en medico!		+ Obten 2 puntos en tiro!" $) 2 lvl
	then;
	gstats{ perk-surgeon } 2 >= if
		($ "+ Obten 2 puntos en medico!		+ Obten 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en tiro!" $) 1 lvl
	then;
		($ "+ Obten 1 punto en medico		+ Obten 1 punto en tiro" .. NEXT_LEVEL .. "2 puntos en medico!" $)
;

: gungineerlevel 
	gstats{ perk-gungineer } 3 >= if
		($ "+ Obten 2 puntos en tiro!		+ Obten 2 puntos en mecanica!" $) 2 lvl
	then;
	gstats{ perk-gungineer } 2 >= if
		($ "+ Obten 2 puntos en tiro!		+ Obten 1 punto en mecanica" .. NEXT_LEVEL .. "2 puntos en mecanica!" $) 1 lvl
	then;
		($ "+ Obten 1 punto en tiro		+ Obten 1 punto en mecanica" .. NEXT_LEVEL .. "2 puntos en tiro!" $)
;

: healthcarelevel 
	gstats{ perk-healthcare } 3 >= if
		($ "+ Comienza con 7 suministros medicos!		+ Obten 2 puntos en medico!" $) 2 lvl
	then;
	gstats{ perk-healthcare } 2 >= if
		($ "+ Comienza con 5 suministros medicos		+ Obten 2 puntos en medico!" .. NEXT_LEVEL .. "7 suministros medicos!" $) 1 lvl
	then;
		($ "+ Comience con 4 suministros medicos		+ Gane 1 punto en medico" .. NEXT_LEVEL .. "5 suministros medicos, 2 en medico!" $)
;


// Pistoleer, shotgunner, rifleman supported for legacy but no longer with level tracking
: pistollevel ($ "+ Gane 3 puntos en tiro!" $) 2 lvl ;
: shotgunlevel ($ "+ Gane 3 puntos en tiro!" $) 2 lvl ;
: riflelevel ($ "+ Gane 3 puntos en tiro!" $) 2 lvl ;

: guncrazylevel 
	gstats{ perk-guncrazy } 3 >= if
		($ "+ Gain 3 points in shooting!
			+ Start with a shotgun, rifle, pistol, and ammo!!" $) 2 lvl
	then;
	gstats{ perk-guncrazy } 2 >= if
		($ "+ Gain 2 points in shooting
			+ Start with a rifle, pistol, and ammo!" .. NEXT_LEVEL .. "3 en tiro, y un escopeton!" $) 1 lvl
	then;
		($ "+ Gain 1 point in shooting
			+ Start with a pistol and bullets!" .. NEXT_LEVEL .. "2 en tiro, y un fusil!" $)
;

: carnutlevel 
	gstats{ perk-carnut } 3 >= if
		($ "+ Gane 3 puntos en mecanica!" $) 2 lvl
	then;
	gstats{ perk-carnut } 2 >= if
		($ "+ Gane 2 puntos en mecanica" .. NEXT_LEVEL .. "3 puntos en mecanica!" $) 1 lvl
	then;
		($ "+ Gane 4 puntos en fuerza!" .. NEXT_LEVEL .. "1 point in mechanical" $)
;

: megabufflevel 
	gstats{ perk-megabuff } 3 >= if
		($ "+ Obten 4 puntos de fuerza!" $) 2 lvl
	then;
	gstats{ perk-megabuff } 2 >= if
		($ "+ Aumenta 3 puntos en fuerza" .. NEXT_LEVEL .. "4 puntos en fuerza!" $) 1 lvl
	then;
		($ "gana +2 puntos en fuerza" .. NEXT_LEVEL .. "tres puntos de fuerza" $)
;

: ultrafitlevel 
	gstats{ perk-ultrafit } 3 >= if
		($ "+ Ganar 4 puntos de aptitud fisica!" $) 2 lvl
	then;
	gstats{ perk-ultrafit } 2 >= if
		($ "+ Ganar 3 puntos de aptitud fisica" .. NEXT_LEVEL .. "tres puntos de aptitud fisica!" $) 1 lvl
	then;
		($ "+ Ganar 2 puntos de aptitud fisica" .. NEXT_LEVEL .. "tres puntos de aptitud fisica" $)
;

: martialartistlevel 
	gstats{ perk-martialartist } 3 >= if
		($ "+ Gain 3 points in fitness, 1 in strength!
			+ Fitness can go 1 point over the usual maximum!" $) 2 lvl
	then;
	gstats{ perk-martialartist } 2 >= if
		($ "+ Ganar 2 puntos de aptitud fisica, 1 de fuerza" .. NEXT_LEVEL .. "+ Puede tener 1 punto mas que el maximo en aptitud fisica: 3" $) 1 lvl
	then;
		($ "+ Ganar 1 punto de aptitud fisica, 1 de fuerza" .. NEXT_LEVEL .. "dos puntos de aptitud fisica" $)
;

: bruiserlevel 
	gstats{ perk-bruiser } 3 >= if
		($ "+ Ganar 3 puntos de fuerza!" $) 2 lvl
	then;
	gstats{ perk-bruiser } 2 >= if
		($ "gana +2 puntos en fuerza" .. NEXT_LEVEL .. "3 en fuerza!" $) 1 lvl
	then;
		($ "+ Aumenta 1 punto en fuerza" .. NEXT_LEVEL .. "2 puntos de fuerza" $)
;

: doglevel 
	gstats{ perk-dogfriend } 3 >= if
		($ "+ 70% mas de posibilidades aleatorias para que la nueva recruita sea un perro" $) 2 lvl
	then;
	gstats{ perk-dogfriend } 2 >= if
		($ "+ 35% mas de posibilidades aleatorias para que la nueva recruita sea un perro" .. NEXT_LEVEL .. "70% de posibilidades!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "35% de posibilidades de que los reclutas sean un perro" $)
;

: explorerlevel 
	gstats{ perk-explorer } 3 >= if
		($ "+ Los costes de recarga ABL cuestan mucho menos gas!" $) 2 lvl
	then;
	gstats{ perk-explorer } 2 >= if
		($ "+ Los costes de recarga ABL cuestan menos gas" .. NEXT_LEVEL .. "Mucho menos gas para las recargas ABL!" $) 1 lvl
	then;
		($ NEXT_LEVEL .. "Menos gas para las recargas ABL" $)
;

: exwrestlerlevel 
	gstats{ perk-exwrestler } 3 >= if
		($ "+ Obten 2 puntos de fitness + Obten 1 punto de fuerza!" $) 2 lvl
	then;
	gstats{ perk-exwrestler } 2 >= if
		($ "+ Obten 1 punto de fitness + Obten 1 punto de fuerza!" .. NEXT_LEVEL .. "2 puntos en fitness!" $) 1 lvl
	then;
		($ "+ Obten 1 punto de fitness" .. 
		gstats{ perk-exwrestler } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "1 punto de fuerza!"
		then $)
;

: hiddenpotentiallevel 
	gstats{ perk-hiddenpotential } 3 >= if
		($ "+ Gana 1 punto en la habilidad no recogida		+ Gana 1 punto final en fuerza o aptitud, a su antojo!" $) 2 lvl
	then;
	gstats{ perk-hiddenpotential } 2 >= if
		($ "+ Gana 1 punto en la otra habilidad" .. NEXT_LEVEL .. "+ Gana un punto aleatorio en aptitud o fuerza!" $) 1 lvl
	then;
		gstats{ perk-hiddenpotential } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "1 punto en la otra habilidad" $)
		then
;

: hagglerlevel 
	gstats{ perk-haggler } 3 >= if
		($ "las tarifas de los bandidos son menos" $) 2 lvl
	then;
	gstats{ perk-haggler } 2 >= if
		($ "las tarifas de los bandidos son menos" .. NEXT_LEVEL .. "Tarifas de bandidos mucho menores!" $) 1 lvl
	then;
		gstats{ perk-haggler } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "Las tarifas de los bandidos son menos" $)
		then
;

: pathfinderlevel 
	gstats{ perk-pathfinder } 3 >= if
		($ "+ 75% de probabilidad de saltar las penas por el 2do dia de caminar!" $) 2 lvl
	then;
	gstats{ perk-pathfinder } 2 >= if
		($ "+ 60% de probabilidad de saltar la penalidad por el 2do dia de caminar" .. NEXT_LEVEL .. "75% de probabilidades!" $) 1 lvl
	then;
		gstats{ perk-pathfinder } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "60% de probabilidades de saltarse la penalizacion para el segundo dia de caminata" $)
		then
;

: trademarklevel 
	gstats{ perk-trademark } 3 >= if
		($ "el arma predeterminada es una macheta resistente!!" $) 2 lvl
	then;
	gstats{ perk-trademark } 2 >= if
		($ "el arma predeterminada: 50% de probabilidades de un bate de aluminio, 50% de machete!" .. NEXT_LEVEL .. "100% de probabilidades de una macheta resistente!" $) 1 lvl
	then;
		($ "el arma predeterminada es un bate de aluminio!" ..
		gstats{ perk-trademark } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "50% de probabilidades de una macheta resistente!" $)
		then $)
;

: naturalshotlevel 
	gstats{ perk-naturalshot } 3 >= if
		($ "obtienes 2 puntos en tiro!		El tiro puede superar el limite maximo en 2 puntos!" $) 2 lvl
	then;
	gstats{ perk-naturalshot } 2 >= if
		($ "obtienes 2 puntos en tiro!		El tiro puede superar el limite maximo en 1 punto!" .. NEXT_LEVEL .. "2 por encima del maximo!" $) 1 lvl
	then;
		($ "obtienes 1 punto en tiro!		El tiro puede superar el limite maximo en 1 punto!" .. 
		gstats{ perk-naturalshot } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "2 puntos en tiro!"
		then $)
;

: tstclevel 
		($ "- Can't raise fitness!!! " $) ..
	gstats{ perk-tstc } 3 >= if
		($ "La condicion fisica comienza en 2!" $) 2 lvl
	then;
	gstats{ perk-tstc } 2 >= if
		($ "La condicion fisica comienza en 1" .. NEXT_LEVEL .. "La aptitud sube a 2!" $) 1 lvl
	then;
		gstats{ perk-tstc } 1 < if 
			($ LOCKED $) 1 lock
		else
			($ NEXT_LEVEL .. "El fitness sube a 1" $)
		then
;

: shieldofhopelevel 
	gstats{ perk-shieldofhope } 3 >= if
		($ "- Pierdes 2 moral cada vez que evadas la muerte!" $) 2 lvl
	then;
	gstats{ perk-shieldofhope } 2 >= if
		($ "- Pierdes 3 moral cada vez que evadas la muerte" .. NEXT_LEVEL .. "Solo tienes 2 moral!" $) 1 lvl
	then;
		($ "- Pierdes 4 moral cada vez que evadas la muerte" ..
		gstats{ perk-shieldofhope } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "perdiste 3 moral"
		then $)
;

: archerlevel
		($ "+ Creas flechas para tu arco entre misiones, " $) ..
	gstats{ perk-archer } 3 >= if
		($ "hasta 10!" $) 2 lvl
	then;
	gstats{ perk-archer } 2 >= if
		($ "hasta 7" .. NEXT_LEVEL .. "Creas 10 flechas!" $) 1 lvl
	then;
		($ "hasta 4" ..
		gstats{ perk-archer } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Creas 7 flechas"
		then $)
;

: pyrolevel
		($ "recarga tu soplete entre misiones " $) ..
	gstats{ perk-pyro } 3 >= if
		($ "hasta 8 cargas!" $) 2 lvl
	then;
	gstats{ perk-pyro } 2 >= if
		($ "hasta seis cargas" .. NEXT_LEVEL .. "Encuentra ocho cargas!" $) 1 lvl
	then;
		($ "hasta cuatro cargas" ..
		gstats{ perk-pyro } 1 < if 
			LOCKED 1 lock
		else
			NEXT_LEVEL .. "Encuentra seis cargas"
		then $)
;

: specialist-lock
	gstats{ trait-specialist } 1 < if ($ LOCKED $) 1 lock else "" then ;
: travellight-lock
	gstats{ trait-travellight } 1 < if ($ LOCKED $) 1 lock else "" then ;
: grappler-lock
	gstats{ trait-grappler } 1 < if ($ LOCKED $) 1 lock else "" then ;
: herotype-lock
	gstats{ trait-herotype } 1 < if ($ LOCKED $) 1 lock else "" then ;
: animefan-lock
	gstats{ trait-animefan } 1 < if ($ LOCKED $) 1 lock else "" then ;
: soundsleep-lock
	gstats{ trait-soundsleep } 1 < if ($ LOCKED $) 1 lock else "" then ;
: cityseek-lock
	gstats{ trait-cityseek } 1 < if ($ LOCKED $) 1 lock else "" then ;
: tinyeat-lock
	gstats{ trait-tinyeat } 1 < if ($ LOCKED $) 1 lock else "" then ;
: gourmand-lock
	gstats{ trait-gourmand } 1 < if ($ LOCKED $) 1 lock else "" then ;
: phoenix-lock
	gstats{ trait-phoenix } 1 < if ($ LOCKED $) 1 lock else "" then ;
: savant-lock // Rewrote this from fireproof, so uses trait-fireproof
	gstats{ trait-fireproof } 1 < if ($ LOCKED $) 1 lock else "" then ;
: fastlearn-lock
	gstats{ trait-fastlearn } 1 < if ($ LOCKED $) 1 lock else "" then ;

// Definitions

: defperks init

	// Perks
	"Mecanico" $perk
		($ "El coche es vida! Nota: No necesariamente un mecanico competente.	+ Empieza con una clave de tuercas		" .. mechaniclevel $) $desc
		' mechanicperk applyword
		
	"Atleta" $perk
		($ "Un pasado atletico se adapta bien a la supervivencia de zombis.	+ Empieza con una arma deportiva aleatoria		" .. athletelevel $) $desc
		' athleteperk applyword
		
	"Peleador" $perk
		($ "Este persona ha sido siempre un verdadero peleador.	+ Empieza con una hacha		" .. fighterlevel $) $desc
		' fighterperk applyword
		
	"Cirujano" $perk
		($ "Tiene una buena intuicion de anatomia y una mano realmente estable.	+ Empieza con un cuchillo de cirugia		" .. surgeonlevel $) $desc
		' surgeonperk applyword
		
	"Quijeroferrero" $perk
		($ "Es bueno con cualquier cosa mecanica, y los revolveres son mecanicos.		+ Empezar con un crowbar		" .. gungineerlevel $) $desc
		' gungineerperk applyword
		
(*	"Pistoleer" $perk
		($ "Las pistolas apuntan rapido y la municion es abundante!		+ Empezar con una pistola y 30 balas		" .. pistollevel $) $desc
		' pistolperk applyword
		
	"Tirador de rifle" $perk
		($ "Un tiro de rifle puede atravesar una hilera de zombies, en las manos adecuadas!		+ Empezar con un rifle y 24 municion		" .. riflelevel $) $desc
		' rifleperk applyword
		
	"Escopetero" $perk
		($ "Todo el mundo sabe que las escopetas son el verdadero arma contra los zombies!		+ Empezar con una escopeta y 15 cartuchos		" .. shotgunlevel $) $desc
		' shotgunperk applyword *)

	"Artista Marcial" $perk
		($ "Sin armas? No hay problema!		+ Empezar con un poderoso ataque cuerpo a cuerpo de dos golpes!!		- Se niega a usar armas de fuego, motosierras, y algunas otras!!		" .. martialartistlevel $) $desc
		' martialartistperk applyword		
		
	"Gran maton" $perk
		($ "Se mueve lento, golpea duro, resiste los golpes!		+ Empezar con un mejor ataque cuerpo a cuerpo! Aguanta un golpe mas de lo normal!		- Velocidad de caminata mas lenta!		" .. bruiserlevel $) $desc
		' bruiserperk applyword
	
	"Coleccionista de armas" $perk
		($ "Sabias que acumular todas esas armas seria util! Algun dia. Lo sabias. Solo lo sabias!		" .. guncrazylevel $) $desc
		' guncrazyperk applyword
	
	"Atencion medica" $perk
		($ "	Los idiotas son mordidos por zombies todo el tiempo! Mejor estar preparado!" .. healthcarelevel $) $desc
		' healthcareperk applyword	
		
	"Enamorado de los coches" $perk
		($ "Ser entusiasta del automovil es casi como una superpotencia ahora!		+ Comienza con un auto mejor		" .. carnutlevel $) $desc
		' carnutperk applyword
				
	"Megabuff" $perk
		($ "Posiblemente demasiado musculoso para controlarlo. Util para levantar y tirar muebles pesados!		+ Empieza con un tubo de metal		" .. megabufflevel $) $desc
		' megabuffperk applyword
		
	"Ultrafit" $perk
		($ "Esa persona ha obtenido muchos beneficios de la yoga!		+ Comienza con algunas barras de granola		" .. ultrafitlevel $) $desc 
		' ultrafitperk applyword
				
	"Amigo de Perro" $perk
		($ "Esta persona ama perros, y tiende a chocar con ellos!		+ Los perros rabiosos pueden convertirse en amigables		" .. doglevel $) $desc
		' dogfriendperk applyword

	"Explorador" $perk
		($ "Algunas personas tienen un sentido extraordinario de la direccion al conducir!		+ Obtiene una opcion adicional de localizacion durante los eventos Siempre Saquear		" .. explorerlevel $) $desc
		' explorerperk applyword
		
	"Exluchador" $perk
		($ "Fue el lider antes de un desgraciado incidente en el ring!		+ Toma a los zombis derribados, luego tira o golpea ellos!		- Penalidad grande para la maxima habilidad de disparo.		" .. exwrestlerlevel $) $desc
		' exwrestlerperk applyword
		
	"Potencial Oculto" $perk
		($ "Parece inofensivo, pero puede superar a otros con el entrenamiento!		+ Obtiene un punto en fuerza o fisico al azar. Puede llegar a ser 1 por encima del maximo!		" .. hiddenpotentiallevel $) $desc
		' hiddenpotentialperk applyword
	
	"Vendedor de Primera" $perk
		($ "La buena venta aun tiene su propia nicho!		+ Obtiene 1-8 comida adicional al vender a un comprador de armas, dependiendo del precio original.		+ No penaltia de moral al pagar peajes de bandidos con comida!" .. hagglerlevel $) $desc
		' hagglerperk applyword
	
	"Explorador" $perk
		($ "1st walking day penalty event removed" .. pathfinderlevel $) $desc
		' pathfinderperk applyword
	
	"Arma de Marca Registrada" $perk
		($ "Se destaca de la multitud, con una arma especial!		+ Comienza con una arma especial, segun el trato!		- No puede dejar esta arma, incluso en la muerte.		" .. trademarklevel $) $desc
		' trademarkperk applyword
		
	"Tiro natural" $perk
		($ "Naturalmente habil en el tiro! Solo necesita mas entrenamiento y tal vez incluso una pistola y municiones!		\n" .. naturalshotlevel $) $desc
		' naturalshotperk applyword
	
	"T*S*T*C" $perk
		($ "Definitely too swole! REFUSES to do cardio!
		+ Starts at full strength!
		+ May train strength 6 times over the maximum!!!
		" .. tstclevel $) $desc
		' tstcperk applyword
		
	"Escudo de la Esperanza" $perk
		($ "Se mantiene en pie a traves del voluntad!		+ Protege contra golpes mortales si el animo esta por encima de :" .. shieldofhopelevel $) $desc
		' shieldofhopeperk applyword
		
	"Arco y flechas" $perk
		($ "El tiro con arco resulto ser una pasatiempo util!		+ Empieza con un arco silencioso, 30 flechas, 2 puntos de fuerza!		- No puede dejar este arco, incluso en la muerte.		\n" .. archerlevel $) $desc
		' archerperk applyword
		
	"Pyromano" $perk
		($ "Los zombis son extremadamente inflamables!		+ Empieza con una antorcha, y proteccion contra el fuego!		- No puede dejar esta antorcha, incluso en la muerte.		\n" .. pyrolevel $) $desc
		' pyroperk applyword

// TEST MAX PERKS
(*

	32 for

	"PRUEBA" i .. $perk
		($ "El tiro con arco resulto ser una pasatiempo util!		+ Empieza con un arco silencioso, 30 flechas, 2 puntos de fuerza!		- No puede dejar este arco, incluso en la muerte.		\n" .. archerlevel $) $desc
		' archerperk applyword
	next
*)
		
	// "Barbaro"
	// "Campeon de Home Run"
	// "Afiado"
			
	// Traits
	"Paranoico" $trait
		"Una combinacion alta de percepcion y un gran pessimismo permite a alguien prepararse para lo peor!		+ Puede identificar trazas en nuevos reclutas		+ Siempre mirando por peligros		- Puede ser una verdadera grumpus" $desc
		' paranoidtrait applyword
	"Ignorante'" $trait
		"Bad news" $desc
		' oblivtrait applyword
	"Encantador" $trait
		"Desde la percepcion de otros, una buena actitud y un carisma puro, hay algo sobre esta persona que abre puertas!		+ Engana su camino hacia cosas gratis o fuera de situaciones malas		- No puede enganar su camino de todo" $desc
		' charmtrait applyword
	"Incomodo" $trait
		"This person thinks they're soooooo cool. But they're not! They're just annoying!
		+ Tell people to 'Cool it'
		- Anger pretty much everybody" $desc
		' gratingtrait applyword
	"Huron" $trait
		"La desconfianza puede ser un activo en el post-apocalipsis.		+ Ropar a otros		- Ripiar al grupo		- Tic para la explosion" $desc
		' bandittrait applyword
	"Pasado misterioso" $trait
		"This person... has a mysterious past......
		+ 3 points given to fight skills at random
		- Randomized and extreme personality!" $desc
		' mysterytrait applyword
	"Practico" $trait
		"Tiene una variedad de habilidades utiles, pero es un poco aburrido.		+ 3 puntos otorgados a las habilidades de lucha al azar		+ 3 puntos otorgados a las habilidades de apoyo al azar		- Personalidad aburrida" $desc
		' practicaltrait applyword
	"Guerero" $trait
		"Buena base para golpear a los zombis, con una personalidad no descripta.		+ 2 puntos adicionales de fuerza!		+ 2 puntos adicionales de aptitud fisica!		- Personalidad aburrida" $desc
		' warriortrait applyword
	"Temperamento apacible" $trait
		"Alguien esta de mal genio! La agresion puede ser util.		+ 1 punto extra en fuerza		- Mal genio debido a la baja compostura		+ A veces la agresion puede ser buena" $desc
		' fiercetrait applyword
	"Tranquilo ante el fuego" $trait
		"Calmado y coleccionado. Util cuando disparas a una horda!		+ Muy calmo debido a alta composure		+ 1 punto extra en tiro" $desc
		' calmtrait applyword
	"Criadora" $trait
		"Siempre pensando en otros! Algo raro que no sea comida de zombis hasta ahora.		+ 2 puntos mas medicos! Gran actitud		+ Puede ir un punto por encima del maximo para la habilidad medica!!		- Tal vez sea una actuacion" $desc
		' nurturetrait applyword
	"Inventivo" $trait
		"Comodo con la maquinaria, como los coches.		+ 2 puntos mas mecanicos! Gran ingenio		+ Puede ir un punto por encima del maximo para la habilidad mecanica!!		- Tal vez necesite mas practica para reparar el coche" $desc
		' inventtrait applyword
	"Griton paniquero" $trait
		"Un tipo un poco fragil. Pero realmente bueno en huir!		+ Bonus de velocidad de correr!		- Tiene uno menos golpe que normal		- Mala actitud" $desc
		' frantictrait applyword
	"Tipo resistente" $trait
		"Muy duro! La fuerza! No un planificador a largo plazo.		+ Tiene uno mas golpe que normal		- Malas ruedas de inteligencia" $desc
		' toughtrait applyword
	"ENLOQUECER!" $trait
		"Destroy all zombies! Never retreat! Oh no, I got bit!
		+ 4 points to strength, fitness, and shooting!!
		+ Can go one over the maximum for the above stats!!!
		- Super low personality stats! Dies in one bite!!" $desc
		' berserktrait applyword
	"Civilizado" $trait
		"Mantiene valores antiguos antes de que el mundo se volvio loco. Esto es bueno y malo.	+ Gran lealtad y estadisticas de personalidad!		+ 1 punto a las habilidades mecanicas y medicas!!		- Penalizacion moral permanente y significativa!!" $desc
		' civiltrait applyword
	"Durmiendo profundamente" $trait
		($ "Duerme en cualquier lugar. #1 en dormir!		+ Dormir humanoide! Necesita mucha menos dormir.		+ Nunca obtiene el estado Cansado, nunca." .. soundsleep-lock $) $desc
		' soundsleeptrait applyword
	"Gourmet" $trait
		($ "Aprecia mucho la comida enlatada antigua!		+ Comer una comida completa restablece 1 punto de moralidad de este personaje, hasta el maximo! Obtiene un punto adicional de salud maxima!		- Come un poco mas, 3 alimentos en lugar de 2. Estar bajando de alimentos disminuye la moralidad a una tasa mas rapida!" .. gourmand-lock $) $desc
		' gourmandtrait applyword
	"Buscador de ciudad" $trait
		($ "Viviendo una vida interesante!		+ Gran probabilidad de encontrar un edificio o personaje raro en los eventos de saqueo de la ciudad! Probabilidad normal: 10% Con este trato: 50%		+ Dobla la probabilidad de encontrar Campamentos Comerciantes Raros!" .. cityseek-lock $) $desc
		' cityseektrait applyword
	"Viajar con menos peso" $trait
		($ "Llevar menos para correr un poco mas rapido!		+ Bonus de velocidad de correr!		+ 1 punto adicional en aptitud!		- Puede llevar solo dos armas a la vez!" .. travellight-lock $) $desc
		' travellighttrait applyword
	"Tipo de Heroe" $trait
		($ "Soy tu guardaespaldas. Solo una vez.		+ Salva a un companero de muerte en un evento textual!		- Hace esto solo una vez por juego!		+ Empieza con lealtad maxima!" .. herotype-lock $) $desc
		' herotypetrait applyword
	"Comelon" $trait
		($ "Come mucho menos que lo normal! Come pequenos bocados!		+ Una comida completa solo requiere 1 alimento!!		- Penalizacion de 2 puntos en fuerza maxima!		- Penalizacion de 1 punto en aptitud maxima." .. tinyeat-lock $) $desc
		' tinyeattrait applyword	
	"Fan de Anime" $trait
		($ "Esto es justo como mis animes de zombies!		+ La arma se reemplaza con una katana sobrepotenciada.		- La katana no se puede dejar, ni siquiera en la muerte.		- ADVERTENCIA: Evita obtener toda la moral! CUIDADO ANIME!" .. animefan-lock $) $desc
		' animefantrait applyword	
	"Especialista" $trait
		($ "Un poco demasiado fijado en un metodo para aplastar zombis.		+ 2 puntos en fuerza, condicion fisica y tiro		+ Puede superar el maximo para las estadisticas anteriores!!		- Solo puede llevar UNA ARMA a la vez!!" .. specialist-lock $) $desc
		' spectrait applyword
	"Grappler" $trait
		($ "Si un zombi se cae, puedes recogerlo!		+ Lanza o golpea zombis llevados!		- Personalidad aburrida" .. grappler-lock $) $desc
		' grapplertrait applyword
	"Fenix" $trait
		($ "El Fenix resurge de las cenizas! *agita los brazos como si fueran alas*		+ Se resucita a si mismo en la muerte, a la salud completa!!		+ Es incombustible! Parate en las llamas!		- Pierde el rasgo por completo despues de la primera muerte!" .. phoenix-lock $) $desc
		' phoenixtrait applyword
	"Dingus Savant" $trait
		($ "Siempre destinado a grandes cosas! Nunca se molesto en trabajar por ello.		+ Obtiene un bono de 1 punto al maximo para todas las habilidades!		- Se necesita 1 golpe menos de lo normal!		- Penalty de 2 puntos al maximo de moral!" .. savant-lock $) $desc
		' savanttrait applyword
	"Aprendiz Rapido" $trait
		($ "Comienza bajo, pero aprende nuevas habilidades rapidamente!		+ Obtiene el doble de la cantidad de habilidades de tiro, mecanicas y medicas!		- Cada bono de crecimiento se detiene despues de que su habilidad llega a 4 puntos" .. fastlearn-lock $) $desc
		' fastlearntrait applyword
	
		
	// "Durmiendo profundamente"
	// "Gourmet"
	// "Buscador de ciudad"
	// "Viajar con menos peso"
	
	// "Comelon"
	// "Fan de Anime"
	// "Especialista"
	// "Grappler"
	// "Fenix"
	// ""
	// ""
	// ""
;

defperks

}
