	: CAT-oneline1 "MIAU!" ;
	: CAT-oneline2 "MIAU! MIAU!" ;
	: CAT-oneline3 "CHIADO!" ;
	: CAT-oneline4 "ROOOOOOORW!" ;

	deck-new
		card: CAT-oneline1
		card: CAT-oneline2
		card: CAT-oneline3
		card: CAT-oneline4
	constant CAT-ONELINERS
	CAT-ONELINERS var cat-oneliners
	CAT-ONELINERS shuffles to cat-oneliners

	: CAT-emote1 "  comeca a tossir uma bola de pelo." ;
	: CAT-emote2 "  tenta se deitar confortavelmente, mas e muito grande." ;
	: CAT-emote3 "  ronrona." ;
	: CAT-emote4 "  derrama grandes quantidades de pelo." ;
	: CAT-emote5 " garras para cima no interior." ;
	: CAT-emote6 " ameaca com intencao assassina." ;
	: CAT-emote7 ($ " olhos semicerrados " .. chis .. " olhos como " .. chis .. " cauda se move ao redor." $) ;
	: CAT-emote8 " senta se completamente imovel e olha para o nada." ;
	: CAT-emote9 " assobia aleatoriamente." ;
	: CAT-emote10 "  adormece." ;
	: CAT-emote11 ($ " comeca a se arrumar " .. chim .. "eu mesmo." $) ;
	: CAT-emote12 "  ganindo." ;


	deck-new
		card: CAT-emote1
		card: CAT-emote2
		card: CAT-emote3
		card: CAT-emote4
		card: CAT-emote5
		card: CAT-emote6
		card: CAT-emote7
		card: CAT-emote8
		card: CAT-emote9
		card: CAT-emote10
		card: CAT-emote11
		card: CAT-emote12
	constant CAT-EMOTES
	CAT-EMOTES var cat-emotes
	CAT-EMOTES shuffles to cat-emotes
	
: cat-oneliner
	cat-oneliners depths 0= if CAT-ONELINERS shuffles to cat-oneliners then
	blurbslot 0= if
		drawcard blurbsay
	then
;

: cat-emote
	cat-emotes depths 0= if CAT-EMOTES shuffles to cat-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. cat-emotes drawcard $) txt
	then
;

	deck-new
	12 cards: cat-emote
	4 cards: cat-oneliner

	constant BLURB-CAT-DECK
	BLURB-CAT-DECK var blurb-cat-deck
	BLURB-CAT-DECK shuffles to blurb-cat-deck
	
// Generic pet emotes as a failsafe
	
	: PET-emote1 " lentamente arruina o interior do carro." ;
	: PET-emote2 " fica tudo cada vez mais sujo." ;
	: PET-emote3 " ocupa recursos valiosos e deveria ser comido." ;
	: PET-emote4 " age preguicosamente." ;
	: PET-emote5 " e meio fofo mas nao muito." ;
		
	deck-new
		card: PET-emote1
		card: PET-emote2
		card: PET-emote3
		card: PET-emote4
		card: PET-emote5
	constant PET-EMOTES
	PET-EMOTES var pet-emotes
	PET-EMOTES shuffles to pet-emotes
	
	: pet-emote
	pet-emotes depths 0= if PET-EMOTES shuffles to pet-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. pet-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: pet-emote
	
	constant BLURB-PET-DECK
	BLURB-PET-DECK var blurb-pet-deck
	BLURB-PET-DECK shuffles to blurb-pet-deck
	
// Goat Emotes

	: GOAT-emote1 " bleats." ;
	: GOAT-emote2 " se debate em sua cadeira." ;
	: GOAT-emote3 " come parte do estofamento." ;
	: GOAT-emote4 " fica encarando as coisas com seu olho estranho." ;
	: GOAT-emote5 "  faz coisas de cabra." ;
		
	deck-new
		card: GOAT-emote1
		card: GOAT-emote2
		card: GOAT-emote3
		card: GOAT-emote4
		card: GOAT-emote5
	constant GOAT-EMOTES
	GOAT-EMOTES var goat-emotes
	GOAT-EMOTES shuffles to goat-emotes
	
	: goat-emote
	goat-emotes depths 0= if GOAT-EMOTES shuffles to goat-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. goat-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: goat-emote
	
	constant BLURB-GOAT-DECK
	BLURB-GOAT-DECK var blurb-goat-deck
	BLURB-GOAT-DECK shuffles to blurb-goat-deck
	
// Pig Emotes

	: PIG-emote1 "  grunhe." ;
	: PIG-emote2 "  senta se em seu assento quietamente." ;
	: PIG-emote3 "  grita um pouco." ;
	: PIG-emote4 "  bufa um pouco." ;
	: PIG-emote5 "  abana as orelhas." ;
		
	deck-new
		card: PIG-emote1
		card: PIG-emote2
		card: PIG-emote3
		card: PIG-emote4
		card: PIG-emote5
	constant PIG-EMOTES
	PIG-EMOTES var pig-emotes
	PIG-EMOTES shuffles to pig-emotes
	
	: pig-emote
	pig-emotes depths 0= if PIG-EMOTES shuffles to pig-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. pig-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: pig-emote
	
	constant BLURB-PIG-DECK
	BLURB-PIG-DECK var blurb-pig-deck
	BLURB-PIG-DECK shuffles to blurb-pig-deck
	
	
